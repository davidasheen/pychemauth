"""
Unittests for DDSIMCA_Model.

author: nam
"""
import os
import unittest

import numpy as np
import pandas as pd

from sklearn import datasets
from pychemauth.classifier.simca import DDSIMCA_Model, SIMCA_Authenticator


class BenchmarkMdatools_UnscaledRobust(unittest.TestCase):
    """Compare to calculations in mdatools 0.14.1"""

    @classmethod
    def setUpClass(self):
        """Set up class with a baseline model."""
        iris_x, iris_y = datasets.load_iris(return_X_y=True)

        mask = ~np.array(np.arange(0, 150)%2, dtype=bool)
        Xc, cc = iris_x[mask], iris_y[mask]
        self.Xt, self.ct = iris_x[~mask], iris_y[~mask]
        self.X_ver = Xc[25:49+1]

        self.model = DDSIMCA_Model(n_components=3, scale_x=False, robust="semi")
        self.model.fit(self.X_ver)

    def test_limits(self):
        """Test the limits."""
        np.testing.assert_almost_equal(self.model._DDSIMCA_Model__h0_, 3.2926643176398445, decimal=6)
        np.testing.assert_almost_equal(self.model._DDSIMCA_Model__q0_, 0.005740692404315845, decimal=6)
        np.testing.assert_equal(self.model._DDSIMCA_Model__Nh_, 3)
        np.testing.assert_equal(self.model._DDSIMCA_Model__Nq_, 1)

    def test_h_q(self):
        """Test h and q calculations."""
        h, q = self.model._h_q(self.X_ver) 

        h_ref = np.array([4.77171654, 2.75143311, 0.8987456 , 2.54231763, 1.43809606,
            6.08384604, 4.24788793, 4.13095832, 2.82430469, 5.1823128 ,
            4.81726875, 4.86184375, 1.45479018, 2.58343793, 0.48035585,
            1.64016271, 1.00806454, 4.68307436, 1.9506773 , 1.65060822,
            2.33439666, 0.54908297, 0.65567525, 0.63863683, 7.82030598])

        q_ref = np.array([3.18285570e-03, 3.30868486e-04, 9.32868151e-03, 5.15442729e-04,
            9.35255698e-03, 9.85819363e-05, 9.24760679e-03, 1.09086940e-02,
            4.34280869e-04, 5.08765128e-02, 2.22454776e-02, 1.93032208e-03,
            6.09076841e-04, 5.49066926e-04, 2.29733400e-03, 1.89992946e-03,
            2.24385651e-04, 1.95414327e-03, 4.85800027e-04, 5.86526601e-03,
            3.49630019e-02, 6.12099036e-04, 1.78687625e-03, 5.57456496e-03,
            2.01724343e-02])
        
        np.testing.assert_almost_equal(h, h_ref, decimal=6)
        np.testing.assert_almost_equal(q, q_ref, decimal=6)

    def test_transform(self):
        """Test the PCA transformation."""
        t_ref = np.array([[-1.08962048, -0.19293659, -0.35231781],
            [-1.13020795, -0.11318057, -0.10628868],
            [-0.57514842, -0.1586274 ,  0.02282457],
            [-0.65799301,  0.3597364 , -0.14740245],
            [-0.63732632, -0.21745701, -0.10091114],
            [ 1.4920094 , -0.26921049,  0.25365938],
            [ 0.41657892, -0.59563996,  0.1141728 ],
            [ 0.68457237,  0.10855937, -0.42623331],
            [ 0.06902387,  0.48732028,  0.14116788],
            [-0.12597871, -0.41252924,  0.44371215],
            [-0.44293927,  0.62496969,  0.14825723],
            [-0.5281624 , -0.16067872,  0.48652287],
            [-0.31202314, -0.17940343, -0.23335573],
            [-0.89171307, -0.31695499,  0.04057418],
            [-0.18696734,  0.18064726,  0.06573012],
            [ 0.81752743, -0.18247433,  0.0382111 ],
            [ 0.4364997 , -0.09820257, -0.17834763],
            [ 0.21155673,  0.60682294,  0.21086376],
            [-0.86582821, -0.0479773 , -0.17135312],
            [ 0.35088067,  0.31197554, -0.15328652],
            [ 0.37475627,  0.14913221,  0.32705094],
            [ 0.40465076, -0.13872057, -0.04701349],
            [ 0.37718072,  0.13612216,  0.1059556 ],
            [ 0.24776529,  0.21170621, -0.05680032],
            [ 1.56090618, -0.09299886, -0.42539238]])
        np.testing.assert_almost_equal(self.model.transform(self.X_ver), t_ref, decimal=6)

        t_ref = np.array([[ 2.70457524e+00, -3.69909699e-01, -1.86575094e+00],
            [ 2.82837658e+00, -9.58383156e-02, -1.75778096e+00],
            [ 1.86563927e+00,  8.85379047e-02, -2.38850227e+00],
            [ 2.45608738e+00, -1.31840573e-01, -2.08903467e+00],
            [ 2.63365881e+00, -3.08465296e-01, -1.87479166e+00],
            [ 2.53769679e+00,  1.48117865e-02, -1.95195864e+00],
            [ 3.33402564e+00, -1.26223770e-01, -1.87127066e+00],
            [ 1.62831438e+00,  1.93322972e-01, -2.94757633e+00],
            [ 2.39758838e+00, -1.17700928e-01, -2.24274986e+00],
            [ 2.24944145e+00,  1.12451840e-01, -2.36723167e+00],
            [ 2.25943443e+00,  7.81571312e-02, -2.29081079e+00],
            [ 2.23480402e+00, -1.04841261e-01, -1.88776764e+00],
            [ 2.51146193e+00, -3.75361642e-01, -1.76583856e+00],
            [ 2.28448003e+00, -1.83675548e-01, -2.22268453e+00],
            [ 2.66711221e+00, -6.07722626e-02, -1.78920273e+00],
            [ 2.13285864e+00, -3.04099939e-01, -2.20349264e+00],
            [ 1.92808270e+00,  8.35945960e-02, -2.84228642e+00],
            [ 2.69700670e+00, -3.48625039e-01, -2.16326716e+00],
            [ 2.54920976e+00,  2.72346400e-03, -2.26194175e+00],
            [ 2.38482095e+00, -1.91591906e-01, -2.12388261e+00],
            [ 3.23500436e+00, -5.98354917e-01, -1.33359454e+00],
            [ 2.28976338e+00,  9.64687412e-02, -2.03574094e+00],
            [ 2.75676015e+00, -2.76785384e-01, -1.81843611e+00],
            [ 2.86022552e+00, -5.53203195e-02, -1.88911510e+00],
            [ 2.54608532e+00, -2.26657959e-01, -2.09246084e+00],
            [-5.59256542e-01,  1.44645000e-01, -2.65523600e-01],
            [ 6.86592019e-01, -1.29096663e-01,  2.61859175e-01],
            [ 9.40694665e-02,  2.25487600e-01,  2.09294137e-01],
            [ 1.56882472e+00,  6.91221367e-03, -1.02068941e-01],
            [ 8.25935238e-01,  3.27051386e-01,  5.56737728e-02],
            [ 3.79949152e-02,  2.26617197e-01, -1.65516400e-01],
            [-3.60999137e-01,  1.41822332e-01,  1.53175598e-01],
            [-6.63976370e-01, -1.62799366e-01, -3.85960471e-01],
            [ 3.52815846e-01, -1.10649149e-01, -6.85211035e-02],
            [ 6.56263066e-01, -1.47408273e-01,  6.78932700e-03],
            [ 1.13620967e-01, -1.49266204e-01, -2.66998391e-01],
            [-2.93761612e-01,  7.40867696e-03,  1.92195806e-01],
            [-5.63635445e-01, -1.70715724e-01, -2.87158545e-01],
            [-1.05768706e+00,  3.25500587e-02,  1.19675118e-01],
            [ 8.18697422e-01, -2.81463676e-01, -3.74000110e-01],
            [ 8.97532388e-01, -2.42997003e-01, -4.16359477e-02],
            [-5.13440510e-01,  2.41583027e-01,  6.10385913e-01],
            [-3.51421342e-01,  5.52358694e-01, -2.41572934e-01],
            [-1.27233166e-01, -4.98508544e-01,  2.52596293e-01],
            [ 6.28443024e-01,  6.23871893e-03,  1.33951200e-01],
            [-3.29150193e-01,  1.82340328e-01,  2.18414552e-02],
            [ 1.52663279e+00, -1.20506810e-01, -7.29628915e-02],
            [ 2.37772310e-01,  2.46000915e-01, -1.33221194e-01],
            [-1.69490283e-01, -5.99007614e-02, -1.63659851e-01],
            [ 3.37763234e-01,  1.16888821e-01, -6.02264839e-02],
            [-4.28152196e-01,  4.61204638e-01,  7.17482458e-01],
            [-1.12816902e+00,  4.00158849e-01,  7.39768679e-01],
            [-2.75018603e+00,  6.26751102e-02,  9.33993721e-01],
            [-2.26729739e+00, -7.30661391e-03,  8.62950387e-01],
            [-2.41127616e+00,  7.05430041e-01,  4.02628329e-01],
            [-9.77597643e-01,  1.56996032e-01,  6.43155141e-01],
            [-2.56894845e-01,  3.91843877e-01,  8.25325106e-01],
            [-1.19929619e+00,  6.28826416e-01,  3.73252761e-01],
            [-3.13405340e+00,  6.04787982e-01,  4.67360926e-01],
            [-2.88063065e-01, -1.57278105e-01,  8.50308806e-01],
            [-2.11928469e-01,  6.27448587e-01,  6.00930925e-01],
            [-6.43555935e-01,  7.47756039e-02,  3.96015567e-01],
            [-2.10048413e+00,  1.73998707e-01,  5.03795896e-01],
            [-5.88246573e-01,  3.97281342e-01,  2.73849480e-01],
            [-1.88232522e+00, -8.23820286e-02,  4.72009781e-01],
            [-3.05565290e+00,  3.37090268e-01,  1.70590804e-01],
            [-7.37232775e-01,  9.66237375e-02,  4.29421221e-01],
            [-2.55499828e+00, -6.60787316e-02,  5.87178785e-01],
            [-1.19666100e+00,  4.48593203e-01,  5.09632611e-01],
            [-1.54931424e+00,  2.22805792e-01,  3.05413435e-01],
            [-1.40470694e+00,  2.08102673e-01,  1.28206748e-01],
            [-1.84990255e+00,  5.52719254e-01,  6.38141941e-01],
            [-1.29402303e+00,  2.87087342e-01,  3.29236767e-01],
            [-1.09424564e+00,  3.06471060e-01,  3.61531974e-01],
            [-5.67560603e-01,  5.71083396e-01,  4.78305667e-01]])
        np.testing.assert_almost_equal(self.model.transform(self.Xt), t_ref, decimal=6)

    def test_predict(self):
        """Test prediction of class membership."""
        correct = np.array([False, False, False, False, False, False, False, False, False,
            False, False, False, False, False, False, False, False, False,
            False, False, False, False, False, False, False,  True,  True,
                True,  True,  True,  True,  True,  True, False,  True,  True,
            False,  True,  True,  True,  True,  True,  True,  True,  True,
                True,  True,  True,  True,  True, False, False, False, False,
            False, False, False, False, False, False, False, False, False,
                True, False, False,  True, False,  True, False, False, False,
            False, False,  True])

        np.testing.assert_equal(self.model.predict(self.Xt), correct)

    def test_predict(self):
        """Test prediction of class membership."""
        correct = np.array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
            False,  True,  True,  True,  True,  True,  True,  True,  True,
                True,  True,  True,  True,  True,  True, False])

        np.testing.assert_equal(self.model.predict(self.X_ver), correct)

class BenchmarkMdatools_ScaledRobust(unittest.TestCase):
    """Compare to calculations in mdatools 0.14.1"""

    @classmethod
    def setUpClass(self):
        """Set up class with a baseline model."""
        iris_x, iris_y = datasets.load_iris(return_X_y=True)

        mask = ~np.array(np.arange(0, 150)%2, dtype=bool)
        Xc, cc = iris_x[mask], iris_y[mask]
        self.Xt, self.ct = iris_x[~mask], iris_y[~mask]
        self.X_ver = Xc[25:49+1]

        self.model = DDSIMCA_Model(n_components=3, scale_x=True, robust="semi")
        self.model.fit(self.X_ver)

    def test_limits(self):
        """Test the limits."""
        np.testing.assert_almost_equal(self.model._DDSIMCA_Model__h0_, 3.432719122682241, decimal=6)
        np.testing.assert_almost_equal(self.model._DDSIMCA_Model__q0_, 0.06563691425828075, decimal=6)
        np.testing.assert_equal(self.model._DDSIMCA_Model__Nh_, 2)
        np.testing.assert_equal(self.model._DDSIMCA_Model__Nq_, 2)

    def test_h_q(self):
        """Test h and q calculations."""
        h, q = self.model._h_q(self.X_ver) 

        h_ref = np.array([5.16116011, 2.79169621, 0.93793799, 2.59032416, 2.12232282,
            6.0605329 , 4.97775883, 2.99512368, 2.24964571, 7.4702286 ,
            6.93160014, 5.08589724, 1.48695285, 2.64658726, 0.70369322,
            1.77040697, 1.0009081 , 3.44613512, 1.78936172, 1.73037546,
            0.65903569, 0.62048362, 0.42689768, 0.62339357, 5.72154036])

        q_ref = np.array([1.54227898e-04, 4.03835472e-05, 1.21975375e-01, 1.68551437e-03,
            5.11823665e-02, 3.90496925e-03, 4.47291461e-02, 2.72915314e-01,
            6.92367425e-02, 4.36544971e-01, 6.80615368e-02, 1.43135991e-03,
            4.69999624e-03, 4.71213176e-04, 6.47910640e-03, 1.13625330e-02,
            3.82685800e-03, 1.62831048e-01, 2.43623524e-02, 7.06124519e-02,
            6.58058495e-01, 4.14851388e-04, 4.94147906e-02, 7.71518799e-02,
            5.04497463e-01])
        
        np.testing.assert_almost_equal(h, h_ref, decimal=6)
        np.testing.assert_almost_equal(q, q_ref, decimal=6)

    def test_transform(self):
        """Test the PCA transformation."""
        t_ref = np.array([[-2.00422627,  0.6003292 , -1.11084334],
            [-2.27789443,  0.58751958, -0.41379048],
            [-1.18773539,  0.46626399,  0.20803525],
            [-2.09397721, -0.78473435, -0.21056233],
            [-0.87208549,  0.77352511, -0.60415901],
            [ 3.76677681,  0.35945372,  0.58155077],
            [ 2.08556395,  1.49438827, -0.15366028],
            [ 1.09970034, -0.99695622, -0.63976863],
            [-0.5971635 , -1.02994953,  0.44548878],
            [ 0.00668977,  1.10899348,  1.46949151],
            [-2.271817  , -1.39767327,  0.91104839],
            [-0.94565916,  0.92457127,  1.15708223],
            [-0.36429691,  0.36306219, -0.69130577],
            [-1.39699517,  1.12275994, -0.13649777],
            [-0.79386015, -0.37036684,  0.32498153],
            [ 2.185734  ,  0.24281582, -0.026896  ],
            [ 1.1373404 , -0.05106157, -0.45711645],
            [-0.42966915, -1.2713125 ,  0.59841653],
            [-1.88353726,  0.23342331, -0.4209124 ],
            [ 0.39425126, -0.89197973, -0.4249927 ],
            [ 0.95971691,  0.045584  ,  0.35774759],
            [ 1.16220103,  0.18216184, -0.19174337],
            [ 0.69569596, -0.30504279,  0.21107687],
            [ 0.33536471, -0.53807483, -0.23608349],
            [ 3.28988194, -0.86770008, -0.54658743]])
        np.testing.assert_almost_equal(self.model.transform(self.X_ver), t_ref, decimal=6)

        t_ref = np.array([[ 7.00041967, -1.25974945, -5.07751791],
            [ 6.99993774, -1.74228401, -4.9534497 ],
            [ 4.45907211, -2.44238937, -6.33751484],
            [ 6.25007293, -1.79012838, -5.81534993],
            [ 7.01754078, -1.19852136, -5.45803239],
            [ 6.30413587, -1.97512469, -5.58239735],
            [ 8.1120415 , -1.9712201 , -5.13400024],
            [ 3.74323322, -3.07736205, -7.65369735],
            [ 5.87262057, -2.08438851, -5.88199581],
            [ 5.34431305, -2.55859215, -6.35801571],
            [ 5.21376053, -2.56345359, -5.8974764 ],
            [ 5.27122131, -1.92501143, -4.72084267],
            [ 6.68980968, -1.02633467, -4.99393211],
            [ 5.94428655, -1.72562217, -6.15362592],
            [ 6.66446712, -1.74209264, -5.13523698],
            [ 5.37739512, -1.67083885, -5.57082328],
            [ 4.83843217, -2.65794173, -7.76048009],
            [ 6.86695124, -1.6055148 , -5.68472794],
            [ 6.43951199, -2.13917184, -6.46479845],
            [ 6.16632576, -1.66944689, -5.8918138 ],
            [ 8.14803949, -0.74256288, -3.27905846],
            [ 4.92297125, -2.6374913 , -4.81990905],
            [ 6.81532229, -1.56214914, -4.72586296],
            [ 6.97507711, -1.97550743, -5.21882278],
            [ 6.50179638, -1.66963826, -5.71002652],
            [-1.54372496, -0.4182112 , -0.5369187 ],
            [ 1.55947411,  0.16896949,  0.86888406],
            [ 0.13336252, -0.19211812,  0.18933926],
            [ 3.52421865, -0.58138812, -0.24342801],
            [ 1.10213433, -1.13858687,  0.55204893],
            [-0.50811079, -0.83700504, -0.02397734],
            [-0.83562559,  0.04476615,  0.13337626],
            [-1.27439848,  0.24604156, -0.93617798],
            [ 1.4481667 ,  0.42510813, -0.84744892],
            [ 1.85026338,  0.24300719, -0.20868328],
            [ 0.36553088,  0.00877456, -0.51664041],
            [-0.15964444,  0.58505932, -0.23165764],
            [-1.05235926,  0.30221684, -0.67436586],
            [-2.62322857,  0.21594362,  0.55489249],
            [ 2.35079437,  0.14308351, -1.06578581],
            [ 2.56800997,  0.36816738, -0.38211191],
            [-1.46670909,  0.13982839,  1.4510181 ],
            [-1.7541649 , -1.43636886, -0.32656862],
            [ 0.43577108,  1.35988795,  0.57727241],
            [ 1.28289003, -0.18474404,  0.49818757],
            [-0.86048622, -0.18845727, -0.13199682],
            [ 3.57876352, -0.28384988, -0.13454363],
            [ 0.46591723, -0.5332134 , -0.69662281],
            [-0.19680257,  0.12169923, -0.53837802],
            [ 0.58708816, -0.41758472, -0.13076008],
            [-2.10574842, -0.64668918,  2.42951906],
            [-3.09938086,  0.06655616,  1.80143631],
            [-6.26723392,  1.47707057,  2.24787927],
            [-4.73087246,  1.66793754,  1.59697142],
            [-7.27021864, -1.07550201,  2.1422854 ],
            [-2.83509428,  0.19013302,  2.13078549],
            [-1.90083032, -0.65174199,  3.07184566],
            [-4.6019327 , -1.42102362,  2.30480855],
            [-7.83959337,  0.05754638,  1.04384534],
            [-0.39297293,  1.14946376,  2.02254343],
            [-2.11852785, -1.35936042,  2.51223997],
            [-2.02877691,  0.02570313,  1.61195896],
            [-4.72170717,  0.84758581,  0.87731605],
            [-2.27615868, -0.74623013,  1.20884197],
            [-3.68057116,  1.45200244,  0.53758073],
            [-7.12910437,  0.4932458 ,  0.10046095],
            [-1.5873981 ,  0.50673428,  0.76108717],
            [-6.32151316,  0.95248239,  2.32167337],
            [-3.3462807 , -0.22284254,  1.27425111],
            [-4.45811882, -0.22095638,  1.63748012],
            [-4.65551371, -0.75349274,  1.94778776],
            [-5.61750985, -0.60009778,  2.47910207],
            [-4.46315873, -0.76163229,  2.36608859],
            [-3.48913072, -0.45784065,  1.69344312],
            [-2.33552715, -0.87485979,  1.52181938]])
        np.testing.assert_almost_equal(self.model.transform(self.Xt), t_ref, decimal=6)

    def test_predict(self):
        """Test prediction of class membership."""
        correct = np.array([False, False, False, False, False, False, False, False, False,
            False, False, False, False, False, False, False, False, False,
            False, False, False, False, False, False, False,  True,  True,
            False,  True,  True,  True,  True,  True, False,  True,  True,
            False,  True,  True,  True,  True,  True,  True,  True,  True,
                True,  True, False,  True,  True, False, False, False, False,
            False, False, False, False, False,  True, False, False, False,
                True, False, False, False, False,  True, False, False, False,
            False, False,  True])

        np.testing.assert_equal(self.model.predict(self.Xt), correct)

    def test_predict(self):
        """Test prediction of class membership."""
        correct = np.array([ True,  True,  True,  True,  True,  True,  True, False,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,
            True,  True, False,  True,  True,  True, False])

        np.testing.assert_equal(self.model.predict(self.X_ver), correct)

class BenchmarkMdatools_Unscaled(unittest.TestCase):
    """Compare to calculations in mdatools 0.14.1"""

    @classmethod
    def setUpClass(self):
        """Set up class with a baseline model."""
        iris_x, iris_y = datasets.load_iris(return_X_y=True)

        mask = ~np.array(np.arange(0, 150)%2, dtype=bool)
        Xc, cc = iris_x[mask], iris_y[mask]
        self.Xt, self.ct = iris_x[~mask], iris_y[~mask]
        self.X_ver = Xc[25:49+1]

        self.model = DDSIMCA_Model(n_components=3, scale_x=False, robust=None)
        self.model.fit(self.X_ver)

    def test_limits(self):
        """Test the limits."""
        np.testing.assert_almost_equal(self.model._DDSIMCA_Model__h0_, 2.8799999999999977, decimal=6)
        np.testing.assert_almost_equal(self.model._DDSIMCA_Model__q0_, 0.007817834405397996, decimal=6)
        np.testing.assert_equal(self.model._DDSIMCA_Model__Nh_, 4)
        np.testing.assert_equal(self.model._DDSIMCA_Model__Nq_, 1)

    def test_h_q(self):
        """Test h and q calculations."""
        h, q = self.model._h_q(self.X_ver) 

        h_ref = np.array([4.77171654, 2.75143311, 0.8987456 , 2.54231763, 1.43809606,
            6.08384604, 4.24788793, 4.13095832, 2.82430469, 5.1823128 ,
            4.81726875, 4.86184375, 1.45479018, 2.58343793, 0.48035585,
            1.64016271, 1.00806454, 4.68307436, 1.9506773 , 1.65060822,
            2.33439666, 0.54908297, 0.65567525, 0.63863683, 7.82030598])

        q_ref = np.array([3.18285570e-03, 3.30868486e-04, 9.32868151e-03, 5.15442729e-04,
            9.35255698e-03, 9.85819363e-05, 9.24760679e-03, 1.09086940e-02,
            4.34280869e-04, 5.08765128e-02, 2.22454776e-02, 1.93032208e-03,
            6.09076841e-04, 5.49066926e-04, 2.29733400e-03, 1.89992946e-03,
            2.24385651e-04, 1.95414327e-03, 4.85800027e-04, 5.86526601e-03,
            3.49630019e-02, 6.12099036e-04, 1.78687625e-03, 5.57456496e-03,
            2.01724343e-02])
        
        np.testing.assert_almost_equal(h, h_ref, decimal=6)
        np.testing.assert_almost_equal(q, q_ref, decimal=6)

    def test_transform(self):
        """Test the PCA transformation."""
        t_ref = np.array([[-1.08962048, -0.19293659, -0.35231781],
            [-1.13020795, -0.11318057, -0.10628868],
            [-0.57514842, -0.1586274 ,  0.02282457],
            [-0.65799301,  0.3597364 , -0.14740245],
            [-0.63732632, -0.21745701, -0.10091114],
            [ 1.4920094 , -0.26921049,  0.25365938],
            [ 0.41657892, -0.59563996,  0.1141728 ],
            [ 0.68457237,  0.10855937, -0.42623331],
            [ 0.06902387,  0.48732028,  0.14116788],
            [-0.12597871, -0.41252924,  0.44371215],
            [-0.44293927,  0.62496969,  0.14825723],
            [-0.5281624 , -0.16067872,  0.48652287],
            [-0.31202314, -0.17940343, -0.23335573],
            [-0.89171307, -0.31695499,  0.04057418],
            [-0.18696734,  0.18064726,  0.06573012],
            [ 0.81752743, -0.18247433,  0.0382111 ],
            [ 0.4364997 , -0.09820257, -0.17834763],
            [ 0.21155673,  0.60682294,  0.21086376],
            [-0.86582821, -0.0479773 , -0.17135312],
            [ 0.35088067,  0.31197554, -0.15328652],
            [ 0.37475627,  0.14913221,  0.32705094],
            [ 0.40465076, -0.13872057, -0.04701349],
            [ 0.37718072,  0.13612216,  0.1059556 ],
            [ 0.24776529,  0.21170621, -0.05680032],
            [ 1.56090618, -0.09299886, -0.42539238]])
        np.testing.assert_almost_equal(self.model.transform(self.X_ver), t_ref, decimal=6)

        t_ref = np.array([[ 2.70457524e+00, -3.69909699e-01, -1.86575094e+00],
            [ 2.82837658e+00, -9.58383156e-02, -1.75778096e+00],
            [ 1.86563927e+00,  8.85379047e-02, -2.38850227e+00],
            [ 2.45608738e+00, -1.31840573e-01, -2.08903467e+00],
            [ 2.63365881e+00, -3.08465296e-01, -1.87479166e+00],
            [ 2.53769679e+00,  1.48117865e-02, -1.95195864e+00],
            [ 3.33402564e+00, -1.26223770e-01, -1.87127066e+00],
            [ 1.62831438e+00,  1.93322972e-01, -2.94757633e+00],
            [ 2.39758838e+00, -1.17700928e-01, -2.24274986e+00],
            [ 2.24944145e+00,  1.12451840e-01, -2.36723167e+00],
            [ 2.25943443e+00,  7.81571312e-02, -2.29081079e+00],
            [ 2.23480402e+00, -1.04841261e-01, -1.88776764e+00],
            [ 2.51146193e+00, -3.75361642e-01, -1.76583856e+00],
            [ 2.28448003e+00, -1.83675548e-01, -2.22268453e+00],
            [ 2.66711221e+00, -6.07722626e-02, -1.78920273e+00],
            [ 2.13285864e+00, -3.04099939e-01, -2.20349264e+00],
            [ 1.92808270e+00,  8.35945960e-02, -2.84228642e+00],
            [ 2.69700670e+00, -3.48625039e-01, -2.16326716e+00],
            [ 2.54920976e+00,  2.72346400e-03, -2.26194175e+00],
            [ 2.38482095e+00, -1.91591906e-01, -2.12388261e+00],
            [ 3.23500436e+00, -5.98354917e-01, -1.33359454e+00],
            [ 2.28976338e+00,  9.64687412e-02, -2.03574094e+00],
            [ 2.75676015e+00, -2.76785384e-01, -1.81843611e+00],
            [ 2.86022552e+00, -5.53203195e-02, -1.88911510e+00],
            [ 2.54608532e+00, -2.26657959e-01, -2.09246084e+00],
            [-5.59256542e-01,  1.44645000e-01, -2.65523600e-01],
            [ 6.86592019e-01, -1.29096663e-01,  2.61859175e-01],
            [ 9.40694665e-02,  2.25487600e-01,  2.09294137e-01],
            [ 1.56882472e+00,  6.91221367e-03, -1.02068941e-01],
            [ 8.25935238e-01,  3.27051386e-01,  5.56737728e-02],
            [ 3.79949152e-02,  2.26617197e-01, -1.65516400e-01],
            [-3.60999137e-01,  1.41822332e-01,  1.53175598e-01],
            [-6.63976370e-01, -1.62799366e-01, -3.85960471e-01],
            [ 3.52815846e-01, -1.10649149e-01, -6.85211035e-02],
            [ 6.56263066e-01, -1.47408273e-01,  6.78932700e-03],
            [ 1.13620967e-01, -1.49266204e-01, -2.66998391e-01],
            [-2.93761612e-01,  7.40867696e-03,  1.92195806e-01],
            [-5.63635445e-01, -1.70715724e-01, -2.87158545e-01],
            [-1.05768706e+00,  3.25500587e-02,  1.19675118e-01],
            [ 8.18697422e-01, -2.81463676e-01, -3.74000110e-01],
            [ 8.97532388e-01, -2.42997003e-01, -4.16359477e-02],
            [-5.13440510e-01,  2.41583027e-01,  6.10385913e-01],
            [-3.51421342e-01,  5.52358694e-01, -2.41572934e-01],
            [-1.27233166e-01, -4.98508544e-01,  2.52596293e-01],
            [ 6.28443024e-01,  6.23871893e-03,  1.33951200e-01],
            [-3.29150193e-01,  1.82340328e-01,  2.18414552e-02],
            [ 1.52663279e+00, -1.20506810e-01, -7.29628915e-02],
            [ 2.37772310e-01,  2.46000915e-01, -1.33221194e-01],
            [-1.69490283e-01, -5.99007614e-02, -1.63659851e-01],
            [ 3.37763234e-01,  1.16888821e-01, -6.02264839e-02],
            [-4.28152196e-01,  4.61204638e-01,  7.17482458e-01],
            [-1.12816902e+00,  4.00158849e-01,  7.39768679e-01],
            [-2.75018603e+00,  6.26751102e-02,  9.33993721e-01],
            [-2.26729739e+00, -7.30661391e-03,  8.62950387e-01],
            [-2.41127616e+00,  7.05430041e-01,  4.02628329e-01],
            [-9.77597643e-01,  1.56996032e-01,  6.43155141e-01],
            [-2.56894845e-01,  3.91843877e-01,  8.25325106e-01],
            [-1.19929619e+00,  6.28826416e-01,  3.73252761e-01],
            [-3.13405340e+00,  6.04787982e-01,  4.67360926e-01],
            [-2.88063065e-01, -1.57278105e-01,  8.50308806e-01],
            [-2.11928469e-01,  6.27448587e-01,  6.00930925e-01],
            [-6.43555935e-01,  7.47756039e-02,  3.96015567e-01],
            [-2.10048413e+00,  1.73998707e-01,  5.03795896e-01],
            [-5.88246573e-01,  3.97281342e-01,  2.73849480e-01],
            [-1.88232522e+00, -8.23820286e-02,  4.72009781e-01],
            [-3.05565290e+00,  3.37090268e-01,  1.70590804e-01],
            [-7.37232775e-01,  9.66237375e-02,  4.29421221e-01],
            [-2.55499828e+00, -6.60787316e-02,  5.87178785e-01],
            [-1.19666100e+00,  4.48593203e-01,  5.09632611e-01],
            [-1.54931424e+00,  2.22805792e-01,  3.05413435e-01],
            [-1.40470694e+00,  2.08102673e-01,  1.28206748e-01],
            [-1.84990255e+00,  5.52719254e-01,  6.38141941e-01],
            [-1.29402303e+00,  2.87087342e-01,  3.29236767e-01],
            [-1.09424564e+00,  3.06471060e-01,  3.61531974e-01],
            [-5.67560603e-01,  5.71083396e-01,  4.78305667e-01]])
        np.testing.assert_almost_equal(self.model.transform(self.Xt), t_ref, decimal=6)

    def test_predict(self):
        """Test prediction of class membership."""
        correct = np.array([False, False, False, False, False, False, False, False, False,
            False, False, False, False, False, False, False, False, False,
            False, False, False, False, False, False, False,  True,  True,
                True,  True,  True,  True,  True,  True,  True,  True,  True,
                True,  True,  True,  True,  True,  True,  True,  True,  True,
                True,  True,  True,  True,  True, False, False, False, False,
            False, False, False, False, False, False, False, False, False,
                True, False, False,  True, False, False, False, False, False,
            False, False, False])

        np.testing.assert_equal(self.model.predict(self.Xt), correct)

    def test_predict(self):
        """Test prediction of class membership."""
        correct = np.array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
            False,  True,  True,  True,  True,  True,  True,  True,  True,
                True,  True,  True,  True,  True,  True, False])

        np.testing.assert_equal(self.model.predict(self.X_ver), correct)

class BenchmarkMdatools_Scaled(unittest.TestCase):
    """Compare to calculations in mdatools 0.14.1"""

    @classmethod
    def setUpClass(self):
        """Set up class with a baseline model."""
        iris_x, iris_y = datasets.load_iris(return_X_y=True)

        mask = ~np.array(np.arange(0, 150)%2, dtype=bool)
        Xc, cc = iris_x[mask], iris_y[mask]
        self.Xt, self.ct = iris_x[~mask], iris_y[~mask]
        self.X_ver = Xc[25:49+1]

        self.model = DDSIMCA_Model(n_components=3, scale_x=True, robust=None)
        self.model.fit(self.X_ver)

    def test_limits(self):
        """Test the limits."""
        np.testing.assert_almost_equal(self.model._DDSIMCA_Model__h0_, 2.8799999999999977, decimal=6)
        np.testing.assert_almost_equal(self.model._DDSIMCA_Model__q0_, 0.10584179785146551, decimal=6)
        np.testing.assert_equal(self.model._DDSIMCA_Model__Nh_, 4)
        np.testing.assert_equal(self.model._DDSIMCA_Model__Nq_, 1)

    def test_h_q(self):
        """Test h and q calculations."""
        h, q = self.model._h_q(self.X_ver) 

        h_ref = np.array([5.16116011, 2.79169621, 0.93793799, 2.59032416, 2.12232282,
            6.0605329 , 4.97775883, 2.99512368, 2.24964571, 7.4702286 ,
            6.93160014, 5.08589724, 1.48695285, 2.64658726, 0.70369322,
            1.77040697, 1.0009081 , 3.44613512, 1.78936172, 1.73037546,
            0.65903569, 0.62048362, 0.42689768, 0.62339357, 5.72154036])

        q_ref = np.array([1.54227898e-04, 4.03835472e-05, 1.21975375e-01, 1.68551437e-03,
            5.11823665e-02, 3.90496925e-03, 4.47291461e-02, 2.72915314e-01,
            6.92367425e-02, 4.36544971e-01, 6.80615368e-02, 1.43135991e-03,
            4.69999624e-03, 4.71213176e-04, 6.47910640e-03, 1.13625330e-02,
            3.82685800e-03, 1.62831048e-01, 2.43623524e-02, 7.06124519e-02,
            6.58058495e-01, 4.14851388e-04, 4.94147906e-02, 7.71518799e-02,
            5.04497463e-01])
        
        np.testing.assert_almost_equal(h, h_ref, decimal=6)
        np.testing.assert_almost_equal(q, q_ref, decimal=6)

    def test_transform(self):
        """Test the PCA transformation."""
        t_ref = np.array([[-2.00422627,  0.6003292 , -1.11084334],
            [-2.27789443,  0.58751958, -0.41379048],
            [-1.18773539,  0.46626399,  0.20803525],
            [-2.09397721, -0.78473435, -0.21056233],
            [-0.87208549,  0.77352511, -0.60415901],
            [ 3.76677681,  0.35945372,  0.58155077],
            [ 2.08556395,  1.49438827, -0.15366028],
            [ 1.09970034, -0.99695622, -0.63976863],
            [-0.5971635 , -1.02994953,  0.44548878],
            [ 0.00668977,  1.10899348,  1.46949151],
            [-2.271817  , -1.39767327,  0.91104839],
            [-0.94565916,  0.92457127,  1.15708223],
            [-0.36429691,  0.36306219, -0.69130577],
            [-1.39699517,  1.12275994, -0.13649777],
            [-0.79386015, -0.37036684,  0.32498153],
            [ 2.185734  ,  0.24281582, -0.026896  ],
            [ 1.1373404 , -0.05106157, -0.45711645],
            [-0.42966915, -1.2713125 ,  0.59841653],
            [-1.88353726,  0.23342331, -0.4209124 ],
            [ 0.39425126, -0.89197973, -0.4249927 ],
            [ 0.95971691,  0.045584  ,  0.35774759],
            [ 1.16220103,  0.18216184, -0.19174337],
            [ 0.69569596, -0.30504279,  0.21107687],
            [ 0.33536471, -0.53807483, -0.23608349],
            [ 3.28988194, -0.86770008, -0.54658743]])
        np.testing.assert_almost_equal(self.model.transform(self.X_ver), t_ref, decimal=6)

        t_ref = np.array([[ 7.00041967, -1.25974945, -5.07751791],
            [ 6.99993774, -1.74228401, -4.9534497 ],
            [ 4.45907211, -2.44238937, -6.33751484],
            [ 6.25007293, -1.79012838, -5.81534993],
            [ 7.01754078, -1.19852136, -5.45803239],
            [ 6.30413587, -1.97512469, -5.58239735],
            [ 8.1120415 , -1.9712201 , -5.13400024],
            [ 3.74323322, -3.07736205, -7.65369735],
            [ 5.87262057, -2.08438851, -5.88199581],
            [ 5.34431305, -2.55859215, -6.35801571],
            [ 5.21376053, -2.56345359, -5.8974764 ],
            [ 5.27122131, -1.92501143, -4.72084267],
            [ 6.68980968, -1.02633467, -4.99393211],
            [ 5.94428655, -1.72562217, -6.15362592],
            [ 6.66446712, -1.74209264, -5.13523698],
            [ 5.37739512, -1.67083885, -5.57082328],
            [ 4.83843217, -2.65794173, -7.76048009],
            [ 6.86695124, -1.6055148 , -5.68472794],
            [ 6.43951199, -2.13917184, -6.46479845],
            [ 6.16632576, -1.66944689, -5.8918138 ],
            [ 8.14803949, -0.74256288, -3.27905846],
            [ 4.92297125, -2.6374913 , -4.81990905],
            [ 6.81532229, -1.56214914, -4.72586296],
            [ 6.97507711, -1.97550743, -5.21882278],
            [ 6.50179638, -1.66963826, -5.71002652],
            [-1.54372496, -0.4182112 , -0.5369187 ],
            [ 1.55947411,  0.16896949,  0.86888406],
            [ 0.13336252, -0.19211812,  0.18933926],
            [ 3.52421865, -0.58138812, -0.24342801],
            [ 1.10213433, -1.13858687,  0.55204893],
            [-0.50811079, -0.83700504, -0.02397734],
            [-0.83562559,  0.04476615,  0.13337626],
            [-1.27439848,  0.24604156, -0.93617798],
            [ 1.4481667 ,  0.42510813, -0.84744892],
            [ 1.85026338,  0.24300719, -0.20868328],
            [ 0.36553088,  0.00877456, -0.51664041],
            [-0.15964444,  0.58505932, -0.23165764],
            [-1.05235926,  0.30221684, -0.67436586],
            [-2.62322857,  0.21594362,  0.55489249],
            [ 2.35079437,  0.14308351, -1.06578581],
            [ 2.56800997,  0.36816738, -0.38211191],
            [-1.46670909,  0.13982839,  1.4510181 ],
            [-1.7541649 , -1.43636886, -0.32656862],
            [ 0.43577108,  1.35988795,  0.57727241],
            [ 1.28289003, -0.18474404,  0.49818757],
            [-0.86048622, -0.18845727, -0.13199682],
            [ 3.57876352, -0.28384988, -0.13454363],
            [ 0.46591723, -0.5332134 , -0.69662281],
            [-0.19680257,  0.12169923, -0.53837802],
            [ 0.58708816, -0.41758472, -0.13076008],
            [-2.10574842, -0.64668918,  2.42951906],
            [-3.09938086,  0.06655616,  1.80143631],
            [-6.26723392,  1.47707057,  2.24787927],
            [-4.73087246,  1.66793754,  1.59697142],
            [-7.27021864, -1.07550201,  2.1422854 ],
            [-2.83509428,  0.19013302,  2.13078549],
            [-1.90083032, -0.65174199,  3.07184566],
            [-4.6019327 , -1.42102362,  2.30480855],
            [-7.83959337,  0.05754638,  1.04384534],
            [-0.39297293,  1.14946376,  2.02254343],
            [-2.11852785, -1.35936042,  2.51223997],
            [-2.02877691,  0.02570313,  1.61195896],
            [-4.72170717,  0.84758581,  0.87731605],
            [-2.27615868, -0.74623013,  1.20884197],
            [-3.68057116,  1.45200244,  0.53758073],
            [-7.12910437,  0.4932458 ,  0.10046095],
            [-1.5873981 ,  0.50673428,  0.76108717],
            [-6.32151316,  0.95248239,  2.32167337],
            [-3.3462807 , -0.22284254,  1.27425111],
            [-4.45811882, -0.22095638,  1.63748012],
            [-4.65551371, -0.75349274,  1.94778776],
            [-5.61750985, -0.60009778,  2.47910207],
            [-4.46315873, -0.76163229,  2.36608859],
            [-3.48913072, -0.45784065,  1.69344312],
            [-2.33552715, -0.87485979,  1.52181938]])
        np.testing.assert_almost_equal(self.model.transform(self.Xt), t_ref, decimal=6)

    def test_predict(self):
        """Test prediction of class membership."""
        correct = np.array([False, False, False, False, False, False, False, False, False,
            False, False, False, False, False, False, False, False, False,
            False, False, False, False, False, False, False,  True,  True,
                True,  True,  True,  True,  True,  True,  True,  True,  True,
                True,  True,  True,  True,  True,  True,  True,  True,  True,
                True,  True,  True,  True,  True, False, False, False, False,
            False, False, False, False, False, False, False, False, False,
                True, False, False,  True, False, False, False, False, False,
            False, False, False])

        np.testing.assert_equal(self.model.predict(self.Xt), correct)

    def test_predict(self):
        """Test prediction of class membership."""
        correct = np.array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
            False,  True,  True,  True,  True,  True,  True,  True,  True,
                True,  True,  True,  True,  True,  True, False])

        np.testing.assert_equal(self.model.predict(self.X_ver), correct)
        
class TestDDSIMCA(unittest.TestCase):
    """Test DDSIMCA."""

    """def test_sklearn_compatibility(self):
        #Check compatible with sklearn's estimator API.
        from sklearn.utils.estimator_checks import check_estimator

        try:
            check_estimator(DDSIMCA_Model(n_components=1))
        except Exception as e:
            error = str(e)
        else:
            error = None
        self.assertIsNone(error, msg=error)"""

    def test_ddsimca_model_semi(self):
        """Test DDSIMCA_Model explicitly."""
        df = pd.read_csv(
            os.path.dirname(os.path.realpath(__file__))
            + "/data/simca_train.csv"
        )
        raw_x = np.array(df.values[:, 3:], dtype=float)
        raw_y = np.array(df["Class"].values, dtype=str)

        dds = DDSIMCA_Model(
            n_components=7, alpha=0.05, gamma=0.01, scale_x=False, robust="semi"
        )
        _ = dds.fit(raw_x, raw_y)

        # Check DoF
        self.assertEqual(dds._DDSIMCA_Model__Nq_, 6)
        self.assertEqual(dds._DDSIMCA_Model__Nh_, 5)

        # Check distances
        h, q = dds._h_q(raw_x)

        h_test = np.array(
            [0.05547138082139136, 0.02909437276782147, 0.09955524352200402]
        ) * (raw_x.shape[0] - 1)
        q_test = np.array(
            [0.012305979489635022, 0.010783302341881816, 0.006410844205906461]
        )

        self.assertTrue(
            np.all(np.abs(h_test - np.array([h[0], h[10], h[50]])) < 1.0e-12)
        )
        self.assertTrue(
            np.all(np.abs(q_test - np.array([q[0], q[10], q[50]])) < 1.0e-12)
        )

        self.assertTrue(
            np.abs(
                dds._DDSIMCA_Model__h0_
                - 0.08682028422484556 * (raw_x.shape[0] - 1)
            )
            < 1.0e-12
        )
        self.assertTrue(
            np.abs(dds._DDSIMCA_Model__q0_ - 0.01772901918522358) < 1.0e-12
        )

        dist = dds.distance(raw_x)
        dist2 = (
            h_test * dds._DDSIMCA_Model__Nh_ / dds._DDSIMCA_Model__h0_
            + q_test * dds._DDSIMCA_Model__Nq_ / dds._DDSIMCA_Model__q0_
        )
        self.assertTrue(
            np.all(
                np.abs(dist2 - np.array([dist[0], dist[10], dist[50]]))
                < 1.0e-12
            )
        )

        # Check critical distances
        self.assertTrue(
            np.abs(dds._DDSIMCA_Model__c_crit_ - 19.67513757268249) < 1.0e-12
        )
        self.assertTrue(
            np.abs(dds._DDSIMCA_Model__c_out_ - 36.50224102208008) < 1.0e-12
        )

        # Check predictions of target class
        self.assertTrue(
            np.all(
                np.where(~dds.predict(raw_x))[0]
                == np.array([6, 7, 14, 17, 18, 19, 20, 21, 22, 65, 69])
            )
        )

        # Check predictions of extreme/outliers
        ext, out = dds.check_outliers(raw_x)
        self.assertTrue(
            np.all(
                np.where(ext)[0]
                == np.array([6, 7, 14, 17, 18, 19, 20, 21, 22, 65, 69])
            )
        )
        self.assertTrue(np.all(np.all(~out)))

        # Check test set (all same class)
        df = pd.read_csv(
            os.path.dirname(os.path.realpath(__file__))
            + "/data/simca_test.csv",
            header=None,
        )
        raw_x_t = np.array(df.values[:, 3:], dtype=float)
        raw_y_t = np.array(df.values[:, 1], dtype=str)

        self.assertTrue(np.all(dds.predict(raw_x_t)))
        ext, out = dds.check_outliers(raw_x_t)
        self.assertTrue(np.all(~ext))
        self.assertTrue(np.all(~out))

        # Check alternative class
        df = pd.read_csv(
            os.path.dirname(os.path.realpath(__file__))
            + "/data/simca_test_alt.csv",
            header=None,
        )
        raw_x_a = np.array(df.values[:, 3:], dtype=float)
        raw_y_a = np.array(df.values[:, 1], dtype=str)
        self.assertTrue(
            np.all(np.where(dds.predict(raw_x_a))[0] == np.array([9]))
        )
        ext, out = dds.check_outliers(raw_x_a)
        self.assertTrue(np.where(~(ext | out))[0] == np.array([9]))

    def test_ddsimca_auth_semi(self):
        """Test SIMCA_Authenticator using the DDSIMCA_Model."""
        df = pd.read_csv(
            os.path.dirname(os.path.realpath(__file__))
            + "/data/simca_train.csv"
        )
        raw_x = np.array(df.values[:, 3:], dtype=float)
        raw_y = np.array(df["Class"].values, dtype=str)

        df = pd.read_csv(
            os.path.dirname(os.path.realpath(__file__))
            + "/data/simca_test_alt.csv",
            header=None,
        )
        raw_x_a = np.array(df.values[:, 3:], dtype=float)
        raw_y_a = np.array(df.values[:, 1], dtype=str)

        sc = SIMCA_Authenticator(
            n_components=7,
            alpha=0.05,
            scale_x=False,
            style="dd-simca",
            target_class="Pure",
            use="compliant",
            robust="semi",
        )

        # Fit on 2 classes - only uses Pure to train
        _ = sc.fit(np.vstack((raw_x, raw_x_a)), np.hstack((raw_y, raw_y_a)))
        self.assertTrue(
            np.isnan(sc.metrics(raw_x_a, raw_y_a)["tsns"])
        )  # Test only alt class
        self.assertTrue(
            np.isnan(sc.metrics(raw_x, raw_y)["tsps"])
        )  # Test only target class
        metrics = sc.metrics(
            np.vstack((raw_x, raw_x_a)), np.hstack((raw_y, raw_y_a))
        )
        self.assertTrue(
            np.abs(metrics["teff"] - np.sqrt(metrics["tsps"] * metrics["tsns"]))
            < 1.0e-12
        )
        self.assertTrue(np.abs(metrics["tsns"] - 0.8472222222222222) < 1.0e-12)
        self.assertTrue(np.abs(metrics["tsps"] - 0.9444444444444444) < 1.0e-12)

    def test_ddsimca_auth_classical(self):
        """Test SIMCA_Authenticator using the DDSIMCA_Model."""
        df = pd.read_csv(
            os.path.dirname(os.path.realpath(__file__))
            + "/data/simca_train.csv"
        )
        raw_x = np.array(df.values[:, 3:], dtype=float)
        raw_y = np.array(df["Class"].values, dtype=str)

        df = pd.read_csv(
            os.path.dirname(os.path.realpath(__file__))
            + "/data/simca_test_alt.csv",
            header=None,
        )
        raw_x_a = np.array(df.values[:, 3:], dtype=float)
        raw_y_a = np.array(df.values[:, 1], dtype=str)

        sc = SIMCA_Authenticator(
            n_components=7,
            alpha=0.05,
            scale_x=False,
            style="dd-simca",
            target_class="Pure",
            use="compliant",
            robust=False,
        )

        # Fit on 2 classes - only uses Pure to train
        _ = sc.fit(np.vstack((raw_x, raw_x_a)), np.hstack((raw_y, raw_y_a)))

        self.assertEqual(sc.model._DDSIMCA_Model__Nq_, 7)
        self.assertEqual(sc.model._DDSIMCA_Model__Nh_, 3)

        self.assertTrue(
            np.abs(
                sc.model._DDSIMCA_Model__h0_
                - 0.09722222222222225 * (raw_x.shape[0] - 1)
            )
            < 1.0e-12
        )
        self.assertTrue(
            np.abs(sc.model._DDSIMCA_Model__q0_ - 0.017851234844890485)
            < 1.0e-12
        )

        self.assertTrue(
            np.isnan(sc.metrics(raw_x_a, raw_y_a)["tsns"])
        )  # Test only alt class
        self.assertTrue(
            np.isnan(sc.metrics(raw_x, raw_y)["tsps"])
        )  # Test only target class
        metrics = sc.metrics(
            np.vstack((raw_x, raw_x_a)), np.hstack((raw_y, raw_y_a))
        )
        self.assertTrue(
            np.abs(metrics["teff"] - np.sqrt(metrics["tsps"] * metrics["tsns"]))
            < 1.0e-12
        )
        self.assertTrue(np.abs(metrics["tsns"] - 0.9305555555555556) < 1.0e-12)
        self.assertTrue(np.abs(metrics["tsps"] - 0.9444444444444444) < 1.0e-12)
