"""
Unittests for MSC transformation.

author: nam
"""
import copy
import os
import unittest

import numpy as np

from pychemauth.preprocessing.filter import MSC


class BenchmarkMdatools(unittest.TestCase):
    """Compare to calculations in mdatools 0.14.1."""

    @classmethod
    def setUpClass(self):
        """Set up class with a baseline model."""
        self.X = np.loadtxt(
            os.path.dirname(os.path.abspath(__file__)) + "/data/spectra.txt",
            skiprows=1,
            dtype=object,
        )
        self.X = np.array(self.X[:, 1:], dtype=np.float64)

    def test_spectra(self):
        """Test the transformation against mdatools 0.14.1."""
        correct = np.array(
            [
                0.11205947,
                0.11797786,
                0.1224954,
                0.12720723,
                0.13336772,
                0.13601823,
                0.14226098,
                0.14353256,
                0.14645572,
                0.14440222,
                0.13725299,
                0.12353272,
                0.1124277,
                0.10321087,
                0.09331084,
                0.08626346,
                0.0794425,
                0.07448308,
                0.0682842,
                0.06807502,
                0.06927295,
                0.06436211,
                0.06219266,
                0.06490428,
                0.06453134,
                0.06800685,
                0.06866027,
                0.06862893,
                0.0689196,
                0.06840094,
                0.06780863,
                0.07323108,
                0.07987889,
                0.08738148,
                0.09637581,
                0.10494784,
                0.11429787,
                0.12703408,
                0.13976952,
                0.17035101,
                0.1873376,
                0.20307689,
                0.21077926,
                0.22773216,
                0.2516392,
                0.2740169,
                0.29857189,
                0.31860385,
                0.334966,
                0.34966875,
                0.36271523,
                0.37937354,
                0.39389138,
                0.41599721,
                0.43834357,
                0.45144019,
                0.45956407,
                0.4580551,
                0.44325911,
                0.41265646,
                0.38272134,
                0.34784795,
                0.31268938,
                0.28395062,
                0.25210302,
                0.23141215,
                0.20980226,
                0.19420165,
                0.17936023,
                0.17046932,
                0.15825646,
                0.14900907,
                0.13888889,
                0.13019072,
                0.12472204,
                0.1203706,
                0.1214142,
                0.12379597,
                0.12704192,
                0.1331507,
                0.13773012,
                0.14005392,
                0.14248662,
                0.13668967,
                0.12743131,
                0.11606304,
                0.10239527,
                0.09185279,
                0.08223873,
                0.07661493,
                0.07786614,
                0.07619185,
                0.07586514,
                0.07586044,
                0.07542952,
                0.071585,
                0.07002196,
                0.06706119,
                0.06585699,
                0.06076203,
                0.05466109,
                0.05272982,
                0.04597153,
                0.04129339,
                0.03617884,
                0.03234842,
                0.02508323,
                0.02307361,
                0.01891021,
                0.01542138,
                0.01395392,
                0.01232351,
                0.01106446,
                0.00972314,
                0.00847585,
                0.00643018,
                0.00661274,
                0.00455297,
                0.00528866,
                0.00458979,
                0.00451771,
                0.00474414,
                0.00464934,
                0.00429286,
                0.00430304,
                0.00409855,
                0.00445034,
                0.00448559,
                0.00330567,
                0.00400297,
                0.00318345,
                0.00327434,
                0.00309335,
                0.00438687,
                0.00313644,
                0.00381415,
                0.00341771,
                0.00510924,
                0.00333153,
                0.00403588,
                0.00398103,
                0.00401159,
                0.00442135,
                0.00540069,
                0.00403979,
                0.00470967,
                0.00389015,
                0.00179748,
                0.00245325,
                0.00409307,
            ]
        )
        np.testing.assert_almost_equal(
            MSC().fit_transform(self.X)[0], correct, decimal=6
        )

        correct = np.array(
            [
                0.11243281,
                0.11883984,
                0.12311297,
                0.12625607,
                0.13121836,
                0.13502275,
                0.14146962,
                0.14671874,
                0.14687676,
                0.14557278,
                0.13547688,
                0.12546598,
                0.11210216,
                0.10009545,
                0.08991457,
                0.08514083,
                0.08123155,
                0.07262156,
                0.06866181,
                0.0662371,
                0.06446836,
                0.06358133,
                0.06377786,
                0.0639465,
                0.06503271,
                0.06588122,
                0.0659755,
                0.0662039,
                0.06943862,
                0.06733924,
                0.06567275,
                0.0721807,
                0.07673799,
                0.08492306,
                0.09507738,
                0.10188145,
                0.11175957,
                0.12336394,
                0.13534144,
                0.16780286,
                0.1849445,
                0.19930024,
                0.20471933,
                0.22403205,
                0.24881565,
                0.27200181,
                0.29497153,
                0.31390315,
                0.33088677,
                0.34762075,
                0.35962747,
                0.37747554,
                0.39660103,
                0.41671845,
                0.44129358,
                0.45479815,
                0.46380518,
                0.46287831,
                0.448338,
                0.41546228,
                0.38520116,
                0.34799787,
                0.31337997,
                0.28337513,
                0.25403556,
                0.23307095,
                0.20976262,
                0.19594202,
                0.17760529,
                0.17036302,
                0.15711739,
                0.15037042,
                0.13977524,
                0.13219568,
                0.12364943,
                0.1236003,
                0.12145444,
                0.12485117,
                0.12723472,
                0.13425656,
                0.13823755,
                0.1402971,
                0.14485306,
                0.13643163,
                0.12932879,
                0.11731278,
                0.10392373,
                0.09339628,
                0.07968855,
                0.07895821,
                0.07569826,
                0.0749095,
                0.07644453,
                0.07451246,
                0.07560132,
                0.07509407,
                0.07106793,
                0.06481892,
                0.06500615,
                0.06102914,
                0.05730576,
                0.05027727,
                0.0475498,
                0.04085329,
                0.03620304,
                0.03121153,
                0.02654801,
                0.02500767,
                0.02090716,
                0.0161321,
                0.01232506,
                0.01266632,
                0.00922578,
                0.01216571,
                0.00729902,
                0.010389,
                0.00754734,
                0.00668554,
                0.00775183,
                0.00518902,
                0.00523682,
                0.00405368,
                0.00554091,
                0.00364469,
                0.00340301,
                0.00481986,
                0.0042595,
                0.00551036,
                0.00436573,
                0.00259301,
                0.00373764,
                0.00358759,
                0.00532313,
                0.0036832,
                0.00565112,
                0.00419576,
                0.00536562,
                0.0062314,
                0.00489157,
                0.0059552,
                0.00381466,
                0.00719146,
                0.0048119,
                0.00503365,
                0.00584366,
                0.00331006,
                0.00793242,
                0.00565112,
                0.00178034,
                0.0057215,
            ]
        )
        np.testing.assert_almost_equal(
            MSC().fit_transform(self.X)[20], correct, decimal=6
        )


class TestMSC(unittest.TestCase):
    """Test MSC transformation."""

    @classmethod
    def setUpClass(self):
        """Set up class with a baseline model."""
        self.X = np.array([[1.0, 2.0, 3.0], [3.0, 4.0, 5.0]])

    def test_fit(self):
        """Fit the class and set up default Xref."""
        X = np.zeros((2, 3), dtype=np.float64)
        msc = MSC()
        try:
            _ = msc.fit(X)
        except:
            self.assertTrue(False)

        self.assertTrue(np.allclose(X, msc.Xref))

    def test_Xref(self):
        """Test Xref is set properly."""
        X = np.zeros((2, 3), dtype=np.float64)
        msc = MSC(Xref=X)
        self.assertTrue(np.allclose(X, msc.Xref))

    def test_transform(self):
        """Test MSC transformation."""
        msc = MSC(self.X[0, :])
        X_t = msc.fit_transform(self.X)
        self.assertTrue(np.allclose(X_t[0, :], msc.Xref))
        self.assertTrue(np.allclose(X_t[1, :], msc.Xref))

        msc = MSC(Xref=self.X[1, :])
        X_t = msc.fit_transform(self.X)
        self.assertTrue(np.allclose(X_t[0, :], msc.Xref))
        self.assertTrue(np.allclose(X_t[1, :], msc.Xref))

        msc = MSC()
        X_t = msc.fit_transform(self.X)
        self.assertTrue(np.allclose(np.mean(self.X, axis=0), msc.Xref))
        self.assertTrue(np.allclose(np.mean(self.X, axis=0), msc.Xref))
