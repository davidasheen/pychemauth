"""
Unittests for PLS.

author: nam
"""
import copy
import os
import unittest

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.pipeline import make_pipeline

from pychemauth.classifier.pca import PCA
from pychemauth.preprocessing.scaling import CorrectedScaler


class TestPCA_Scaled(unittest.TestCase):
    """Test PCA class with scaling used."""

    @classmethod
    def setUpClass(self):
        """Set up class with a baseline model."""
        df = pd.read_csv(
            os.path.dirname(os.path.abspath(__file__)) + "/data/pca_train.csv"
        )
        self.X = np.array(df.values[:, 2:], dtype=float)
        df = pd.read_csv(
            os.path.dirname(os.path.abspath(__file__)) + "/data/pca_test.csv",
            header=None,
        )
        self.X_test = np.array(df.values[:, 2:], dtype=float)
        self.model = PCA(
            n_components=3, alpha=0.05, gamma=0.01, scale_x=True, robust="semi"
        )
        _ = self.model.fit(self.X)

    """def test_sklearn_compatibility(self):
        #Check compatible with sklearn's estimator API.
        from sklearn.utils.estimator_checks import check_estimator

        try:
            check_estimator(PLS(n_components=1))
        except Exception as e:
            error = str(e)
        else:
            error = None
        self.assertIsNone(error, msg=error)"""

    def test_transform(self):
        """Check a few x-scores."""
        res = self.model.transform(self.X)[:3].ravel()
        ans = np.array(
            [
                [6.91353471, -0.56518687, 0.95539941],
                [4.70333919, 0.70899186, -0.73833557],
                [8.56368316, 0.16753437, 2.44838508],
            ]
        ).ravel()
        np.testing.assert_almost_equal(res, ans, decimal=6)

    def test_h_q(self):
        """Check some h and q values."""
        h, q = self.model._h_q(self.X)
        ans_h = np.array([0.07847804, 0.03866518, 0.14480451]) * (
            self.X.shape[0] - 1
        )
        ans_q = np.array([16.39823482, 24.55049204, 26.46794849])
        np.testing.assert_almost_equal(h[:3], ans_h, decimal=6)
        np.testing.assert_almost_equal(q[:3], ans_q, decimal=6)

    def test_distance(self):
        """Check distances."""
        d = self.model.distance(self.X)
        ans = np.array(
            [
                31.82341576,
                41.83228123,
                52.70241445,
                35.85423906,
                55.5940998,
                68.21432676,
                55.06903134,
                44.79118036,
                33.31696359,
                37.33143474,
                57.09886583,
                51.04507137,
                77.31835287,
                53.01488267,
                41.73051566,
                26.94525255,
                38.44411439,
                56.66195323,
                77.49762074,
                36.89859287,
                49.48423524,
                23.96204236,
                40.86327034,
                43.3086212,
                25.7454579,
                26.17573442,
                44.31893236,
                50.16783113,
                43.52504164,
                63.58423243,
                44.65534857,
                42.03864122,
                37.32795999,
                36.28516323,
                66.3779305,
                36.77137886,
                26.5018163,
                31.9986692,
                39.43065491,
                33.08526765,
                46.07659609,
                31.85917177,
                40.50470377,
                68.58568288,
                41.93475589,
                74.64424716,
                23.9582095,
                30.01953812,
                46.26179269,
                35.73016038,
                35.52149937,
                41.74722458,
                44.17780511,
                45.72879875,
                37.83492351,
                41.83403831,
                30.7067163,
                65.28113913,
                30.03950959,
                37.02397345,
                34.10569203,
                42.22383443,
                51.07511196,
                31.12906715,
                32.09113754,
                42.10966483,
                42.90575537,
                35.6157772,
                31.0660362,
            ]
        )
        np.testing.assert_almost_equal(d, ans, decimal=6)

        d = self.model.distance(self.X_test)
        ans = np.array(
            [
                52.22296464,
                56.19062732,
                39.58493506,
                58.22113285,
                42.79378619,
                52.27613685,
                34.50191672,
                50.35189974,
                43.99033119,
                40.4672676,
                34.30347315,
                50.45492937,
                30.93050565,
                26.47886604,
                30.94780793,
                41.99900489,
                37.15897016,
                36.48656994,
                26.5424538,
                37.09979825,
                29.14662847,
                43.90959441,
                33.58664097,
                40.70670589,
                49.57158301,
                57.93372021,
                33.66139445,
                46.46970487,
            ]
        )
        np.testing.assert_almost_equal(d, ans, decimal=6)

    def test_predict(self):
        """Check some predictions on regular data."""
        res = self.model.predict(self.X)
        ans = np.array(
            [
                True,
                True,
                True,
                True,
                True,
                False,
                True,
                True,
                True,
                True,
                True,
                True,
                False,
                True,
                True,
                True,
                True,
                True,
                False,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                False,
                True,
                True,
                True,
                True,
                False,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                False,
                True,
                False,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                False,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
            ],
            dtype=bool,
        )
        self.assertTrue(np.all(res == ans))

    def test_outliers(self):
        """Check some predictions on extremes and outliers."""
        ext, out = self.model.check_outliers(self.X)
        ans = np.array(
            [
                False,
                False,
                False,
                False,
                False,
                True,
                False,
                False,
                False,
                False,
                False,
                False,
                True,
                False,
                False,
                False,
                False,
                False,
                True,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                True,
                False,
                False,
                False,
                False,
                True,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                True,
                False,
                True,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                True,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
            ],
            dtype=bool,
        )
        self.assertTrue(np.all(ext == ans))
        ans = np.array(
            [
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
            ],
            dtype=bool,
        )
        self.assertTrue(np.all(out == ans))

    def test_c_out(self):
        """Check critical distances for X."""
        res = np.array([self.model._PCA__c_crit_, self.model._PCA__c_out_])
        ans = np.array([59.30351203, 84.88690268])
        np.testing.assert_almost_equal(res, ans, decimal=6)

class BenchmarkMdatools_ScaledRobust(unittest.TestCase):
    """Compare to calculations in mdatools 0.14.1"""

    @classmethod
    def setUpClass(self):
        """Set up class with a baseline model."""
        raw = np.loadtxt(os.path.dirname(os.path.abspath(__file__)) + '/data/people.txt', skiprows=2, dtype=object)
        self.X = np.array([row[1:] for row in raw], dtype=np.float64)
        self.model = PCA(
            n_components=5, alpha=0.05, gamma=0.01, scale_x=True, robust="semi"
        )
        _ = self.model.fit(self.X)

    def test_limits(self):
            """Test h and q limits."""
            np.testing.assert_almost_equal(self.model._PCA__h0_, 4.517604926884162, decimal=6)
            np.testing.assert_almost_equal(self.model._PCA__q0_, 0.3347298612776225, decimal=6)

            np.testing.assert_equal(self.model._PCA__Nh_, 15)
            np.testing.assert_equal(self.model._PCA__Nq_, 4)

    def test_loadings(self):
        """Test loadings."""
        loadings = np.array([[ 0.37528576,  0.13545854, -0.07237117, -0.07431853, -0.18590711],
        [ 0.38113572,  0.11144718, -0.0681086 ,  0.03313762, -0.10026969],
        [-0.33777346, -0.1501634 ,  0.07901752, -0.11431601, -0.66017223],
        [ 0.37769704,  0.1508061 , -0.00127806, -0.06569227, -0.15173882],
        [ 0.14294536, -0.06146276,  0.72022861,  0.05531502,  0.02854307],
        [ 0.1904664 , -0.2868932 ,  0.58592683,  0.08459844, -0.06321381],
        [ 0.32466579, -0.30828523, -0.1875664 ,  0.03969704, -0.23112668],
        [-0.12414873,  0.55420028,  0.21158207, -0.12518252, -0.41519417],
        [-0.35178259, -0.23167089, -0.05209242, -0.05139188, -0.31284026],
        [ 0.36490373,  0.11242522, -0.13537493, -0.08102087, -0.33560912],
        [-0.14412125,  0.59525899,  0.13024548, -0.02216385,  0.1511222 ],
        [-0.04406728,  0.12260414, -0.06234358,  0.96893504, -0.18048722]])
        
        np.testing.assert_almost_equal(self.model._PCA__pca_.components_.T, loadings, decimal=6)

    def test_scores(self):
        """Test scores."""
        scores = np.array([[ 5.33252845, -0.67656982,  1.0673076 , -1.10080565, -1.05952338],
        [ 3.11431873, -0.29340163, -0.67070913,  1.30991027, -0.43450124],
        [ 2.99684814, -0.36046886, -0.2118207 ,  1.11693327, -0.20403729],
        [-1.08423975, -1.84492494, -0.4091936 ,  0.12289559,  1.32268205],
        [-0.9814066 , -1.43448734, -1.64532674, -0.52559404, -0.71366096],
        [-0.56723535, -1.55144549, -1.47448794, -1.15354049, -0.67699006],
        [ 2.59105833, -0.92799   , -0.8625124 ,  2.32149913,  0.09457109],
        [ 2.58753541, -1.03727801, -0.68574403,  1.46082728,  0.34695586],
        [-1.6626004 , -1.76225256, -1.12198652, -1.39434963, -0.01844515],
        [-1.48605996, -1.81258416, -0.90354079, -1.20819392, -0.0700629 ],
        [ 3.02650144, -1.40025862, -0.28365027, -0.44047682,  0.63303825],
        [-2.46387814, -2.04004243,  0.22151401,  1.20163778,  0.1397982 ],
        [-1.39600245, -1.73638486,  1.12973657, -1.04080416, -0.36719905],
        [-1.6219743 , -1.89371063,  0.99243873, -0.41886311, -0.28731019],
        [ 3.09508543, -1.06909589,  0.47205034, -0.14447262,  0.30434889],
        [ 3.11250168, -1.18110693,  1.0678497 ,  0.24173148,  0.23196504],
        [ 2.13026745,  2.35610046, -1.50317465, -0.85809795, -0.28429284],
        [ 2.51041238,  2.52476074, -1.54195545, -0.10472558, -0.65332875],
        [-2.00521604,  0.34431218,  2.08450598,  1.54941389, -0.60319726],
        [-3.33526149,  1.95580675, -0.85136001,  0.06324104, -0.88438206],
        [-3.7112318 ,  0.1473736 , -0.19535539,  0.27948736,  0.77359148],
        [ 0.46310761,  1.99196394, -1.08966366,  0.20580164,  0.61653695],
        [ 1.09838113,  2.09410946, -0.49559336, -0.19794118,  0.3762532 ],
        [ 1.43752907,  1.52696564,  1.05932098, -0.78839278,  0.73448252],
        [-3.20678402,  0.63022481, -1.60195776, -1.35831783,  0.42046947],
        [-3.42285494,  1.0207637 , -1.4823971 ,  1.0363415 , -0.0161985 ],
        [ 1.1370609 ,  1.24054519,  2.1997372 , -1.40355016,  0.95348336],
        [ 0.33425343,  1.0335711 ,  2.93090429, -0.8660408 , -0.42032091],
        [-2.61511864,  0.32006258,  0.59971832,  0.78441083,  0.03759416],
        [-2.95826278,  0.68783957,  1.7275568 ,  0.26697997, -0.26804114],
        [ 0.65231777,  2.35977838, -0.12526341,  0.05549229,  0.33428371],
        [-3.10158071,  0.78782404,  1.60305238,  0.9875634 , -0.35856255]])

        np.testing.assert_almost_equal(self.model.transform(self.X), scores, decimal=6)

    def test_h(self):
        """Test h."""
        h = np.array([10.0679417 ,  4.13671304,  2.86319372,  7.30941566,  4.61591906,
        5.23891828,  7.31632269,  4.32787281,  4.54211394,  3.79125933,
        3.80064071,  4.33849411,  3.94511502,  3.05199244,  2.44890636,
        3.06107359,  5.56940065,  6.64287897,  6.91156949,  6.3423203 ,
        4.13167893,  3.77202227,  2.77847367,  4.37052711,  5.76640651,
        4.72219633,  8.70542839,  7.10982784,  1.95262063,  3.71381458,
        2.91277287,  4.74216899])

        np.testing.assert_almost_equal(self.model._h_q(self.X)[0], h, decimal=6)

    def test_q(self):
        """Test q."""
        q = np.array([0.43862413, 0.24561156, 0.33413429, 1.37218392, 0.04476411,
       0.11384285, 0.29478071, 0.33775689, 0.1930444 , 0.06274581,
       0.55121684, 0.47396791, 0.35241792, 0.32970895, 0.10890007,
       0.11857252, 0.12265448, 0.20957887, 0.64320618, 0.9116624 ,
       0.4373679 , 0.31341629, 0.16732566, 0.15044946, 0.27751011,
       0.21207236, 0.05402704, 1.12247076, 0.86372688, 0.26487003,
       0.85836587, 0.21474647])

        np.testing.assert_almost_equal(self.model._h_q(self.X)[1], q, decimal=6)

    def test_transform(self):
        """Test transforming new data."""
        x_test  = np.array([
            [180, 80, -1, 44, 35, 35000, 200, 100, -1, 96, -1, 105],
            [170, 67,  1, 40, 41, 29500, 100, 200,  1, 94,  1, 105],
            [175, 70,  1, 41, 28, 21500, 110, 120,  1, 97,  1, 115]
        ])

        result = np.array([[ 2.69489784, -0.1562752 ,  0.01471942, -0.73489755,  0.24459898],
        [-0.76933194,  1.44617034,  1.22033814, -1.28356915, -1.38193584],
        [-0.42658737,  1.13231773, -0.80757201, -0.51218316, -1.15586114]])
        
        np.testing.assert_almost_equal(self.model.transform(x_test), result, decimal=6)


class BenchmarkMdatools_UnscaledRobust(unittest.TestCase):
    """Compare to calculations in mdatools 0.14.1"""

    @classmethod
    def setUpClass(self):
        """Set up class with a baseline model."""
        raw = np.loadtxt(os.path.dirname(os.path.abspath(__file__)) + '/data/people.txt', skiprows=2, dtype=object)
        self.X = np.array([row[1:] for row in raw], dtype=np.float64)
        self.model = PCA(
            n_components=5, alpha=0.05, gamma=0.01, scale_x=False, robust="semi"
        )
        _ = self.model.fit(self.X)

    def test_limits(self):
        """Test h and q limits."""
        np.testing.assert_almost_equal(self.model._PCA__h0_, 5.12575970787771, decimal=6)
        np.testing.assert_almost_equal(self.model._PCA__q0_, 17.26054862016219, decimal=6)

        np.testing.assert_equal(self.model._PCA__Nh_, 17)
        np.testing.assert_equal(self.model._PCA__Nq_, 4)

    def test_loadings(self):
        """Test loadings."""
        loadings = np.array([[ 3.39141871e-04, -6.58959876e-02,  1.57641480e-01,
            -1.01995318e-02, -4.57388076e-01],
        [ 5.70635412e-04, -1.02693857e-01,  2.16308745e-01,
            1.07887034e-01, -7.30380632e-01],
        [-2.87254427e-05,  5.66999309e-03, -1.16532969e-02,
            -1.05216349e-02,  4.56045735e-02],
        [ 1.54674104e-04, -2.32553291e-02,  6.55710914e-02,
            -2.36903356e-03, -1.66006639e-01],
        [ 9.43136493e-04,  3.06547395e-02,  3.86549637e-02,
            5.70371568e-03, -1.15147407e-01],
        [ 9.99988983e-01,  4.56292209e-03, -1.85106013e-04,
            8.71889151e-05,  1.86628511e-04],
        [ 4.23157065e-03, -9.13227761e-01,  3.32835558e-01,
            -6.99810895e-03,  2.30363868e-01],
        [-1.64478048e-03,  3.83172439e-01,  8.94054764e-01,
            -1.52436156e-02,  2.29481104e-01],
        [-3.68157949e-05,  4.34959015e-03, -1.52926973e-02,
            -8.32541744e-03,  5.64303319e-02],
        [ 2.06342433e-04, -5.10233534e-02,  1.09317344e-01,
            -7.41423080e-03, -3.13368263e-01],
        [-5.13809889e-05,  7.91239781e-03,  1.01712438e-02,
            7.93019081e-03, -3.32737342e-02],
        [-1.45337860e-04,  9.33968445e-03, -5.38981469e-03,
            9.93800276e-01,  7.88863622e-02]])
            
        np.testing.assert_almost_equal(self.model._PCA__pca_.components_.T, loadings, decimal=6)

    def test_scores(self):
        """Test scores."""
        scores = np.array([[ 1.75630992e+04, -8.71672826e+01,  5.14954049e+01,
            -1.17768868e+01, -2.07686624e+00],
        [ 5.56292690e+03, -8.10140205e+01,  1.31983180e+01,
            1.69269921e+01, -4.54061724e+00],
        [ 6.56279861e+03, -5.02727423e+01, -8.60552084e-01,
            1.42362395e+01, -1.13789409e+01],
        [ 5.62652569e+02, -3.41173784e+01, -4.71564684e+01,
            -4.15725101e+00,  1.13100202e+01],
        [-7.43711404e+03, -1.03164187e+02, -9.05217259e+00,
            -6.21626623e+00,  1.17444174e+01],
        [-5.43713442e+03, -9.41117199e+01, -1.64689851e+01,
            -1.34352797e+01,  4.29845826e+00],
        [ 2.56321964e+03, -1.51614152e+02, -5.40375320e+00,
            2.64884287e+01,  4.38662064e+00],
        [ 2.56318243e+03, -1.43160741e+02, -1.07813046e+01,
            1.56882419e+01,  1.70326014e+00],
        [-4.43739672e+03, -3.55787238e+01, -4.16440245e+01,
            -1.82220832e+01,  2.96808020e+00],
        [-3.93735205e+03, -4.35284673e+01, -4.08609626e+01,
            -1.60823097e+01,  4.04992113e+00],
        [ 7.56298209e+03, -8.87512048e+01, -4.06641727e+01,
            -7.11084053e+00, -1.72250714e+01],
        [ 4.56243105e+03,  2.24613116e+01, -4.90988841e+01,
            1.12378557e+01,  1.41643729e+01],
        [ 6.56244246e+03,  2.83268996e+01, -2.23459221e+00,
            -1.49523933e+01,  1.80906603e+01],
        [ 6.56249766e+03,  1.57063852e+01, -8.62964808e+00,
            -7.99674477e+00,  2.08913715e+01],
        [ 9.56294604e+03, -7.42084407e+01, -4.75974059e+00,
            -3.41245815e+00, -5.49620699e+00],
        [ 1.45629087e+04, -5.43869815e+01,  3.45647857e+00,
            7.51804417e-01,  2.12551851e-01],
        [-1.14372511e+04, -7.87473743e+01,  6.74289751e+01,
            -6.48153955e+00, -2.56355122e+00],
        [-1.09372344e+04, -8.12746227e+01,  6.80058352e+01,
            3.67901945e+00, -4.81567633e+00],
        [ 6.56204043e+03,  1.17018371e+02, -4.78075793e+00,
            1.90278951e+01,  4.96606634e+00],
        [-1.34379867e+04,  7.51661524e+01,  6.47470553e+01,
            3.99584679e+00,  2.00751731e+01],
        [-9.43794877e+03,  7.42935295e+01, -5.99536141e+01,
            2.33587438e+00, -8.37713787e+00],
        [-9.43762006e+03,  4.02746994e+00,  1.46379529e+01,
            3.83282919e+00, -7.10364743e+00],
        [-8.43752906e+03, -1.10633184e+01,  3.91566727e+01,
            -6.99373635e-01, -4.95891526e+00],
        [ 3.56221255e+03,  7.29405523e+01,  1.27606085e+01,
            -8.73214718e+00, -1.85329193e+01],
        [-1.64378042e+04,  2.59110811e+01, -3.47388394e+01,
            -1.53036104e+01, -7.78008760e+00],
        [-1.59378715e+04,  4.16149635e+01, -2.95705437e+01,
            1.45005585e+01, -4.78854859e+00],
        [ 8.56212125e+03,  1.05909401e+02,  2.30219390e+01,
            -1.81121072e+01, -8.37134748e+00],
        [ 1.05620425e+04,  1.28518555e+02,  2.77927940e+01,
            -9.15136568e+00, -5.96696349e+00],
        [-1.43803606e+03,  1.12254145e+02, -4.98888524e+01,
            1.02988343e+01, -1.37929384e+01],
        [ 4.06177415e+03,  1.68332088e+02,  6.10178908e+00,
            3.58467882e+00,  4.90794690e+00],
        [-3.43778127e+03,  5.45196126e+01,  5.64500449e+01,
            2.80484502e+00, -3.32968866e+00],
        [ 3.56178203e+03,  1.65160838e+02,  8.29400061e+00,
            1.24527134e+01,  7.33020359e+00]])

        np.testing.assert_almost_equal(self.model.transform(self.X), scores, decimal=4)

    def test_h(self):
        """Test h."""
        h = np.array([ 7.80766956,  3.49839313,  3.49775192,  3.18431316,  3.69764532,
        3.09929051,  7.96651102,  4.45479547,  4.06037071,  3.61176409,
        6.17943381,  4.94835273,  5.34732402,  5.30199742,  2.2296668 ,
        3.0451477 ,  6.19307006,  6.12977555,  4.98782784, 10.15387458,
        5.23577892,  1.87054064,  2.3043741 ,  4.80682607,  6.56558624,
        5.71756885,  5.64651893,  4.97555676,  6.05562242,  4.12224706,
        3.08196921,  5.22243541])

        np.testing.assert_almost_equal(self.model._h_q(self.X)[0], h, decimal=6)

    def test_q(self):
        """Test q."""
        q = np.array([35.71443968, 35.08768074, 17.78109407, 20.08854278,  1.91763623,
            5.2272511 , 20.07610471, 31.46336958, 21.30215015,  4.23099597,
            8.7607161 , 27.61810928,  5.02768079,  5.56589525, 15.06551754,
        11.43038322,  5.87557839, 14.42202749, 57.96202305, 14.27246171,
        19.11872992, 20.00548785, 26.18733802,  9.58393847,  4.114839  ,
            0.92710404,  9.30568383, 31.06949604,  7.96105195, 11.96082495,
        58.64385627, 11.60317814])

        np.testing.assert_almost_equal(self.model._h_q(self.X)[1], q, decimal=6)

    def test_transform(self):
        """Test transforming new data."""
        x_test  = np.array([
            [180, 80, -1, 44, 35, 35000, 200, 100, -1, 96, -1, 105],
            [170, 67,  1, 40, 41, 29500, 100, 200,  1, 94,  1, 105],
            [175, 70,  1, 41, 28, 21500, 110, 120,  1, 97,  1, 115]
        ])

        result = np.array([[ 7.56227612e+03,  6.46277262e+01, -3.97318135e+01,
            -7.07243291e+00, -3.78857547e+01],
        [ 2.06174267e+03,  1.71580515e+02,  1.27372229e+01,
            -9.64036556e+00, -2.41942579e+01],
        [-5.93800483e+03,  9.41720640e+01, -5.27037105e+01,
            9.23537443e-01, -4.50405494e+01]])
            
        np.testing.assert_almost_equal(self.model.transform(x_test), result, decimal=5)

class BenchmarkMdatools_Scaled(unittest.TestCase):
    """Compare to calculations in mdatools 0.14.1"""

    @classmethod
    def setUpClass(self):
        """Set up class with a baseline model."""
        raw = np.loadtxt(os.path.dirname(os.path.abspath(__file__)) + '/data/people.txt', skiprows=2, dtype=object)
        self.X = np.array([row[1:] for row in raw], dtype=np.float64)
        self.model = PCA(
            n_components=5, alpha=0.05, gamma=0.01, scale_x=True, robust=None
        )
        _ = self.model.fit(self.X)

    def test_limits(self):
            """Test h and q limits."""
            np.testing.assert_almost_equal(self.model._PCA__h0_, 4.84375, decimal=6)
            np.testing.assert_almost_equal(self.model._PCA__q0_, 0.3811163636820247, decimal=6)

            np.testing.assert_equal(self.model._PCA__Nh_, 13)
            np.testing.assert_equal(self.model._PCA__Nq_, 3)

    def test_loadings(self):
        """Test loadings."""
        loadings = np.array([[ 0.37528576,  0.13545854, -0.07237117, -0.07431853, -0.18590711],
        [ 0.38113572,  0.11144718, -0.0681086 ,  0.03313762, -0.10026969],
        [-0.33777346, -0.1501634 ,  0.07901752, -0.11431601, -0.66017223],
        [ 0.37769704,  0.1508061 , -0.00127806, -0.06569227, -0.15173882],
        [ 0.14294536, -0.06146276,  0.72022861,  0.05531502,  0.02854307],
        [ 0.1904664 , -0.2868932 ,  0.58592683,  0.08459844, -0.06321381],
        [ 0.32466579, -0.30828523, -0.1875664 ,  0.03969704, -0.23112668],
        [-0.12414873,  0.55420028,  0.21158207, -0.12518252, -0.41519417],
        [-0.35178259, -0.23167089, -0.05209242, -0.05139188, -0.31284026],
        [ 0.36490373,  0.11242522, -0.13537493, -0.08102087, -0.33560912],
        [-0.14412125,  0.59525899,  0.13024548, -0.02216385,  0.1511222 ],
        [-0.04406728,  0.12260414, -0.06234358,  0.96893504, -0.18048722]])
        
        np.testing.assert_almost_equal(self.model._PCA__pca_.components_.T, loadings, decimal=6)

    def test_scores(self):
        """Test scores."""
        scores = np.array([[ 5.33252845, -0.67656982,  1.0673076 , -1.10080565, -1.05952338],
        [ 3.11431873, -0.29340163, -0.67070913,  1.30991027, -0.43450124],
        [ 2.99684814, -0.36046886, -0.2118207 ,  1.11693327, -0.20403729],
        [-1.08423975, -1.84492494, -0.4091936 ,  0.12289559,  1.32268205],
        [-0.9814066 , -1.43448734, -1.64532674, -0.52559404, -0.71366096],
        [-0.56723535, -1.55144549, -1.47448794, -1.15354049, -0.67699006],
        [ 2.59105833, -0.92799   , -0.8625124 ,  2.32149913,  0.09457109],
        [ 2.58753541, -1.03727801, -0.68574403,  1.46082728,  0.34695586],
        [-1.6626004 , -1.76225256, -1.12198652, -1.39434963, -0.01844515],
        [-1.48605996, -1.81258416, -0.90354079, -1.20819392, -0.0700629 ],
        [ 3.02650144, -1.40025862, -0.28365027, -0.44047682,  0.63303825],
        [-2.46387814, -2.04004243,  0.22151401,  1.20163778,  0.1397982 ],
        [-1.39600245, -1.73638486,  1.12973657, -1.04080416, -0.36719905],
        [-1.6219743 , -1.89371063,  0.99243873, -0.41886311, -0.28731019],
        [ 3.09508543, -1.06909589,  0.47205034, -0.14447262,  0.30434889],
        [ 3.11250168, -1.18110693,  1.0678497 ,  0.24173148,  0.23196504],
        [ 2.13026745,  2.35610046, -1.50317465, -0.85809795, -0.28429284],
        [ 2.51041238,  2.52476074, -1.54195545, -0.10472558, -0.65332875],
        [-2.00521604,  0.34431218,  2.08450598,  1.54941389, -0.60319726],
        [-3.33526149,  1.95580675, -0.85136001,  0.06324104, -0.88438206],
        [-3.7112318 ,  0.1473736 , -0.19535539,  0.27948736,  0.77359148],
        [ 0.46310761,  1.99196394, -1.08966366,  0.20580164,  0.61653695],
        [ 1.09838113,  2.09410946, -0.49559336, -0.19794118,  0.3762532 ],
        [ 1.43752907,  1.52696564,  1.05932098, -0.78839278,  0.73448252],
        [-3.20678402,  0.63022481, -1.60195776, -1.35831783,  0.42046947],
        [-3.42285494,  1.0207637 , -1.4823971 ,  1.0363415 , -0.0161985 ],
        [ 1.1370609 ,  1.24054519,  2.1997372 , -1.40355016,  0.95348336],
        [ 0.33425343,  1.0335711 ,  2.93090429, -0.8660408 , -0.42032091],
        [-2.61511864,  0.32006258,  0.59971832,  0.78441083,  0.03759416],
        [-2.95826278,  0.68783957,  1.7275568 ,  0.26697997, -0.26804114],
        [ 0.65231777,  2.35977838, -0.12526341,  0.05549229,  0.33428371],
        [-3.10158071,  0.78782404,  1.60305238,  0.9875634 , -0.35856255]])

        np.testing.assert_almost_equal(self.model.transform(self.X), scores, decimal=6)

    def test_h(self):
        """Test h."""
        h = np.array([10.0679417 ,  4.13671304,  2.86319372,  7.30941566,  4.61591906,
        5.23891828,  7.31632269,  4.32787281,  4.54211394,  3.79125933,
        3.80064071,  4.33849411,  3.94511502,  3.05199244,  2.44890636,
        3.06107359,  5.56940065,  6.64287897,  6.91156949,  6.3423203 ,
        4.13167893,  3.77202227,  2.77847367,  4.37052711,  5.76640651,
        4.72219633,  8.70542839,  7.10982784,  1.95262063,  3.71381458,
        2.91277287,  4.74216899])

        np.testing.assert_almost_equal(self.model._h_q(self.X)[0], h, decimal=6)

    def test_q(self):
        """Test q."""
        q = np.array([0.43862413, 0.24561156, 0.33413429, 1.37218392, 0.04476411,
       0.11384285, 0.29478071, 0.33775689, 0.1930444 , 0.06274581,
       0.55121684, 0.47396791, 0.35241792, 0.32970895, 0.10890007,
       0.11857252, 0.12265448, 0.20957887, 0.64320618, 0.9116624 ,
       0.4373679 , 0.31341629, 0.16732566, 0.15044946, 0.27751011,
       0.21207236, 0.05402704, 1.12247076, 0.86372688, 0.26487003,
       0.85836587, 0.21474647])

        np.testing.assert_almost_equal(self.model._h_q(self.X)[1], q, decimal=6)

    def test_transform(self):
        """Test transforming new data."""
        x_test  = np.array([
            [180, 80, -1, 44, 35, 35000, 200, 100, -1, 96, -1, 105],
            [170, 67,  1, 40, 41, 29500, 100, 200,  1, 94,  1, 105],
            [175, 70,  1, 41, 28, 21500, 110, 120,  1, 97,  1, 115]
        ])

        result = np.array([[ 2.69489784, -0.1562752 ,  0.01471942, -0.73489755,  0.24459898],
        [-0.76933194,  1.44617034,  1.22033814, -1.28356915, -1.38193584],
        [-0.42658737,  1.13231773, -0.80757201, -0.51218316, -1.15586114]])
        
        np.testing.assert_almost_equal(self.model.transform(x_test), result, decimal=6)

class BenchmarkMdatools_Unscaled(unittest.TestCase):
    """Compare to calculations in mdatools 0.14.1"""

    @classmethod
    def setUpClass(self):
        """Set up class with a baseline model."""
        raw = np.loadtxt(os.path.dirname(os.path.abspath(__file__)) + '/data/people.txt', skiprows=2, dtype=object)
        self.X = np.array([row[1:] for row in raw], dtype=np.float64)
        self.model = PCA(
            n_components=5, alpha=0.05, gamma=0.01, scale_x=False, robust=None
        )
        _ = self.model.fit(self.X)

    def test_limits(self):
            """Test h and q limits."""
            np.testing.assert_almost_equal(self.model._PCA__h0_, 4.8437500000001, decimal=6)
            np.testing.assert_almost_equal(self.model._PCA__q0_, 17.792849572635518, decimal=6)

            np.testing.assert_equal(self.model._PCA__Nh_, 14)
            np.testing.assert_equal(self.model._PCA__Nq_, 3)

    def test_loadings(self):
        """Test loadings."""
        loadings = np.array([[ 3.39141871e-04, -6.58959876e-02,  1.57641480e-01,
            -1.01995318e-02, -4.57388076e-01],
        [ 5.70635412e-04, -1.02693857e-01,  2.16308745e-01,
            1.07887034e-01, -7.30380632e-01],
        [-2.87254427e-05,  5.66999309e-03, -1.16532969e-02,
            -1.05216349e-02,  4.56045735e-02],
        [ 1.54674104e-04, -2.32553291e-02,  6.55710914e-02,
            -2.36903356e-03, -1.66006639e-01],
        [ 9.43136493e-04,  3.06547395e-02,  3.86549637e-02,
            5.70371568e-03, -1.15147407e-01],
        [ 9.99988983e-01,  4.56292209e-03, -1.85106013e-04,
            8.71889151e-05,  1.86628511e-04],
        [ 4.23157065e-03, -9.13227761e-01,  3.32835558e-01,
            -6.99810895e-03,  2.30363868e-01],
        [-1.64478048e-03,  3.83172439e-01,  8.94054764e-01,
            -1.52436156e-02,  2.29481104e-01],
        [-3.68157949e-05,  4.34959015e-03, -1.52926973e-02,
            -8.32541744e-03,  5.64303319e-02],
        [ 2.06342433e-04, -5.10233534e-02,  1.09317344e-01,
            -7.41423080e-03, -3.13368263e-01],
        [-5.13809889e-05,  7.91239781e-03,  1.01712438e-02,
            7.93019081e-03, -3.32737342e-02],
        [-1.45337860e-04,  9.33968445e-03, -5.38981469e-03,
            9.93800276e-01,  7.88863622e-02]])
        
        np.testing.assert_almost_equal(self.model._PCA__pca_.components_.T, loadings, decimal=6)

    def test_scores(self):
        """Test scores."""
        scores = np.array([[ 1.75630992e+04, -8.71672826e+01,  5.14954049e+01,
            -1.17768868e+01, -2.07686624e+00],
        [ 5.56292690e+03, -8.10140205e+01,  1.31983180e+01,
            1.69269921e+01, -4.54061724e+00],
        [ 6.56279861e+03, -5.02727423e+01, -8.60552084e-01,
            1.42362395e+01, -1.13789409e+01],
        [ 5.62652569e+02, -3.41173784e+01, -4.71564684e+01,
            -4.15725101e+00,  1.13100202e+01],
        [-7.43711404e+03, -1.03164187e+02, -9.05217259e+00,
            -6.21626623e+00,  1.17444174e+01],
        [-5.43713442e+03, -9.41117199e+01, -1.64689851e+01,
            -1.34352797e+01,  4.29845826e+00],
        [ 2.56321964e+03, -1.51614152e+02, -5.40375320e+00,
            2.64884287e+01,  4.38662064e+00],
        [ 2.56318243e+03, -1.43160741e+02, -1.07813046e+01,
            1.56882419e+01,  1.70326014e+00],
        [-4.43739672e+03, -3.55787238e+01, -4.16440245e+01,
            -1.82220832e+01,  2.96808020e+00],
        [-3.93735205e+03, -4.35284673e+01, -4.08609626e+01,
            -1.60823097e+01,  4.04992113e+00],
        [ 7.56298209e+03, -8.87512048e+01, -4.06641727e+01,
            -7.11084053e+00, -1.72250714e+01],
        [ 4.56243105e+03,  2.24613116e+01, -4.90988841e+01,
            1.12378557e+01,  1.41643729e+01],
        [ 6.56244246e+03,  2.83268996e+01, -2.23459221e+00,
            -1.49523933e+01,  1.80906603e+01],
        [ 6.56249766e+03,  1.57063852e+01, -8.62964808e+00,
            -7.99674477e+00,  2.08913715e+01],
        [ 9.56294604e+03, -7.42084407e+01, -4.75974059e+00,
            -3.41245815e+00, -5.49620699e+00],
        [ 1.45629087e+04, -5.43869815e+01,  3.45647857e+00,
            7.51804417e-01,  2.12551851e-01],
        [-1.14372511e+04, -7.87473743e+01,  6.74289751e+01,
            -6.48153955e+00, -2.56355122e+00],
        [-1.09372344e+04, -8.12746227e+01,  6.80058352e+01,
            3.67901945e+00, -4.81567633e+00],
        [ 6.56204043e+03,  1.17018371e+02, -4.78075793e+00,
            1.90278951e+01,  4.96606634e+00],
        [-1.34379867e+04,  7.51661524e+01,  6.47470553e+01,
            3.99584679e+00,  2.00751731e+01],
        [-9.43794877e+03,  7.42935295e+01, -5.99536141e+01,
            2.33587438e+00, -8.37713787e+00],
        [-9.43762006e+03,  4.02746994e+00,  1.46379529e+01,
            3.83282919e+00, -7.10364743e+00],
        [-8.43752906e+03, -1.10633184e+01,  3.91566727e+01,
            -6.99373635e-01, -4.95891526e+00],
        [ 3.56221255e+03,  7.29405523e+01,  1.27606085e+01,
            -8.73214718e+00, -1.85329193e+01],
        [-1.64378042e+04,  2.59110811e+01, -3.47388394e+01,
            -1.53036104e+01, -7.78008760e+00],
        [-1.59378715e+04,  4.16149635e+01, -2.95705437e+01,
            1.45005585e+01, -4.78854859e+00],
        [ 8.56212125e+03,  1.05909401e+02,  2.30219390e+01,
            -1.81121072e+01, -8.37134748e+00],
        [ 1.05620425e+04,  1.28518555e+02,  2.77927940e+01,
            -9.15136568e+00, -5.96696349e+00],
        [-1.43803606e+03,  1.12254145e+02, -4.98888524e+01,
            1.02988343e+01, -1.37929384e+01],
        [ 4.06177415e+03,  1.68332088e+02,  6.10178908e+00,
            3.58467882e+00,  4.90794690e+00],
        [-3.43778127e+03,  5.45196126e+01,  5.64500449e+01,
            2.80484502e+00, -3.32968866e+00],
        [ 3.56178203e+03,  1.65160838e+02,  8.29400061e+00,
            1.24527134e+01,  7.33020359e+00]])

        np.testing.assert_almost_equal(self.model.transform(self.X), scores, decimal=4)

    def test_h(self):
        """Test h."""
        h = np.array([ 7.80766956,  3.49839313,  3.49775192,  3.18431316,  3.69764532,
        3.09929051,  7.96651102,  4.45479547,  4.06037071,  3.61176409,
        6.17943381,  4.94835273,  5.34732402,  5.30199742,  2.2296668 ,
        3.0451477 ,  6.19307006,  6.12977555,  4.98782784, 10.15387458,
        5.23577892,  1.87054064,  2.3043741 ,  4.80682607,  6.56558624,
        5.71756885,  5.64651893,  4.97555676,  6.05562242,  4.12224706,
        3.08196921,  5.22243541])

        np.testing.assert_almost_equal(self.model._h_q(self.X)[0], h, decimal=6)

    def test_q(self):
        """Test q."""
        q = np.array([35.71443968, 35.08768074, 17.78109407, 20.08854278,  1.91763623,
            5.2272511 , 20.07610471, 31.46336958, 21.30215015,  4.23099597,
            8.7607161 , 27.61810928,  5.02768079,  5.56589525, 15.06551754,
        11.43038322,  5.87557839, 14.42202749, 57.96202305, 14.27246171,
        19.11872992, 20.00548785, 26.18733802,  9.58393847,  4.114839  ,
            0.92710404,  9.30568383, 31.06949604,  7.96105195, 11.96082495,
        58.64385627, 11.60317814])

        np.testing.assert_almost_equal(self.model._h_q(self.X)[1], q, decimal=6)

    def test_transform(self):
        """Test transforming new data."""
        x_test  = np.array([
            [180, 80, -1, 44, 35, 35000, 200, 100, -1, 96, -1, 105],
            [170, 67,  1, 40, 41, 29500, 100, 200,  1, 94,  1, 105],
            [175, 70,  1, 41, 28, 21500, 110, 120,  1, 97,  1, 115]
        ])

        result = np.array([[ 7.56227612e+03,  6.46277262e+01, -3.97318135e+01,
            -7.07243291e+00, -3.78857547e+01],
        [ 2.06174267e+03,  1.71580515e+02,  1.27372229e+01,
            -9.64036556e+00, -2.41942579e+01],
        [-5.93800483e+03,  9.41720640e+01, -5.27037105e+01,
            9.23537443e-01, -4.50405494e+01]])
        
        np.testing.assert_almost_equal(self.model.transform(x_test), result, decimal=5)


class TestPCA_Unscaled(unittest.TestCase):
    """Test PCA class without scaling."""

    @classmethod
    def setUpClass(self):
        """Set up class with a baseline model."""
        df = pd.read_csv(
            os.path.dirname(os.path.abspath(__file__)) + "/data/pca_train.csv"
        )
        self.X = np.array(df.values[:, 2:], dtype=float)
        df = pd.read_csv(
            os.path.dirname(os.path.abspath(__file__)) + "/data/pca_test.csv",
            header=None,
        )
        self.X_test = np.array(df.values[:, 2:], dtype=float)
        self.model = PCA(n_components=3, alpha=0.05, gamma=0.01, scale_x=False)
        _ = self.model.fit(self.X)

    """def test_sklearn_compatibility(self):
        #Check compatible with sklearn's estimator API.
        from sklearn.utils.estimator_checks import check_estimator

        try:
            check_estimator(PLS(n_components=1))
        except Exception as e:
            error = str(e)
        else:
            error = None
        self.assertIsNone(error, msg=error)"""

    def test_transform(self):
        """Check a few x-scores."""
        res = self.model.transform(self.X)[:3].ravel()
        ans = np.array(
            [
                [634.98394834, -97.12147939, -3.66869868],
                [524.78382944, -9.74799749, 5.18016868],
                [622.29974648, -136.69994973, 6.45664819],
            ]
        ).ravel()
        np.testing.assert_almost_equal(res, ans, decimal=6)

    def test_h_q(self):
        """Check some h and q values."""
        h, q = self.model._h_q(self.X)
        ans_h = np.array([0.08629, 0.04169701, 0.12818276]) * (
            self.X.shape[0] - 1
        )
        ans_q = np.array([11.27227657, 18.55001329, 23.00931321])
        np.testing.assert_almost_equal(h[:3], ans_h, decimal=6)
        np.testing.assert_almost_equal(q[:3], ans_q, decimal=6)

    def test_distance(self):
        """Check distances."""
        d = self.model.distance(self.X)
        ans = np.array(
            [
                7.98108314,
                6.138481,
                12.94675015,
                5.64647432,
                4.98264008,
                7.1458563,
                10.0778954,
                7.69384837,
                6.95434529,
                4.91711505,
                13.53435076,
                7.19360596,
                9.46697201,
                5.86306911,
                6.44059759,
                3.15206361,
                7.68618641,
                13.92622045,
                8.04126502,
                8.14876615,
                1.97902131,
                1.59061025,
                7.3393857,
                10.00232231,
                3.0280724,
                5.28637965,
                4.81972862,
                10.65287161,
                10.22010636,
                11.23404044,
                6.30976376,
                3.31808699,
                4.32001167,
                3.86125884,
                17.04204042,
                7.11003387,
                9.12507139,
                2.44343723,
                5.34967574,
                5.53743251,
                13.36666144,
                6.50189328,
                8.45817432,
                9.99033556,
                8.11762949,
                61.76360763,
                3.9152914,
                5.83038053,
                23.55266578,
                9.61853025,
                5.82216434,
                13.32765412,
                8.41221243,
                7.94144303,
                5.06494041,
                3.7665531,
                9.65239748,
                14.01336712,
                2.6665471,
                8.12084272,
                2.70204333,
                10.46532364,
                17.64298547,
                5.75118238,
                6.86580204,
                6.08198437,
                5.27286301,
                3.94903459,
                3.40133656,
            ]
        )
        np.testing.assert_almost_equal(d, ans, decimal=6)

        d = self.model.distance(self.X_test)
        ans = np.array(
            [
                8.39956838,
                4.56153403,
                5.50779581,
                30.42820838,
                18.95873845,
                11.60959175,
                4.54778543,
                12.45583679,
                7.61390547,
                6.70752724,
                6.29823861,
                6.6800101,
                6.80238183,
                7.08098998,
                6.3406675,
                12.24470594,
                9.73885029,
                1.89092402,
                2.70419541,
                3.94204999,
                5.07498032,
                4.06846239,
                6.6687851,
                15.16447846,
                14.49069322,
                18.01458488,
                2.21411002,
                7.20214528,
            ]
        )
        np.testing.assert_almost_equal(d, ans, decimal=6)

    def test_predict(self):
        """Check some predictions on regular data."""
        res = self.model.predict(self.X)
        ans = np.array(
            [
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                False,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                False,
                True,
                True,
                False,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                True,
                False,
                True,
                True,
                True,
                True,
                True,
                True,
            ],
            dtype=bool,
        )
        self.assertTrue(np.all(res == ans))

    def test_outliers(self):
        """Check some predictions on extremes and outliers."""
        ext, out = self.model.check_outliers(self.X)
        ans = np.array(
            [
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                True,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                True,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                True,
                False,
                False,
                False,
                False,
                False,
                False,
            ],
            dtype=bool,
        )
        self.assertTrue(np.all(ext == ans))
        ans = np.array(
            [
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                True,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
                False,
            ],
            dtype=bool,
        )
        self.assertTrue(np.all(out == ans))

    def test_c_out(self):
        """Check critical distances for X."""
        res = np.array([self.model._PCA__c_crit_, self.model._PCA__c_out_])
        ans = np.array([14.06714045, 28.98425643])
        np.testing.assert_almost_equal(res, ans, decimal=6)
